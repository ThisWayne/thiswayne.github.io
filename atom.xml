<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>This Wayne</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://thiswayne.github.io/"/>
  <updated>2022-12-04T09:14:49.207Z</updated>
  <id>https://thiswayne.github.io/</id>
  
  <author>
    <name>This Wayne</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>The Effective Engineer閱讀筆記</title>
    <link href="https://thiswayne.github.io/posts/book-note-the-effective-engineer/"/>
    <id>https://thiswayne.github.io/posts/book-note-the-effective-engineer/</id>
    <published>2020-01-09T23:00:08.000Z</published>
    <updated>2022-12-04T09:14:49.207Z</updated>
    
    <content type="html"><![CDATA[<p>個人的全書總結，整本書圍繞著有很多事情要做，在選擇不同的事情上，選擇上應該多著重在長遠的、有效的來當戰略，而不是與之相反的在短期的、只著重在效率上的戰術。<br>這裡的有效（effective）與策略（strategy）指的是長遠來看效益很高、會隨時間有著槓桿（leverage）成長的。<br>這裡的有效率（efficiency）與戰術（tactic）指的是短期的、以快速為目的達成目標。<br>基本上高手講的都一樣，不要用戰術上的勤勞掩蓋戰略上的懶惰，好的戰術可以打贏一場戰役，好的戰略可以打贏一場戰爭。</p><a id="more"></a><h2 id="一個月裡每天花一小時帶新人可能很划算"><a href="#一個月裡每天花一小時帶新人可能很划算" class="headerlink" title="一個月裡每天花一小時帶新人可能很划算"></a>一個月裡每天花一小時帶新人可能很划算</h2><p>一般來說一年的工時大概會是1800<del>2200小時，一個月工作天數算22天，每天一小時也就是22小時，算下來只花了一年可能只有1%</del>1.2%的工時。<br>新人的成長，比方說學會怎麼更好的debug，可以讓新人之後都能省去很多時間，跟沒學會debug比起來，越早學會越早開始有更好且更多的產出，長遠來看會是很划算的投資。</p><h2 id="如何增加產值？"><a href="#如何增加產值？" class="headerlink" title="如何增加產值？"></a>如何增加產值？</h2><p>一般來說，在單位時間內產出的價值能增加的方法有三種：</p><ul><li>降低完成一項活動的時間</li><li>增加一項活動的輸出</li><li>選擇做其他更有價值的事情</li></ul><p>也就是三種問題：</p><ul><li>怎麼樣可以在更短的時間內完成一項活動？</li><li>怎麼樣可以讓完成的一項活動更有價值？</li><li>有沒有其他事情做了會產出更多價值？</li></ul><h2 id="如何避免拖延？"><a href="#如何避免拖延？" class="headerlink" title="如何避免拖延？"></a>如何避免拖延？</h2><p>IF-THEN方法：如果吃完飯，然後就看教材；如果怎麼樣，然後就怎麼樣，自動的去執行，不要留有意識的來做選擇</p><h2 id="盡早且頻繁的取得回饋"><a href="#盡早且頻繁的取得回饋" class="headerlink" title="盡早且頻繁的取得回饋"></a>盡早且頻繁的取得回饋</h2><p>越晚越不頻繁的取得回饋，路走偏了越晚修正就越浪費資源</p><h2 id="有測量數據，有明確的改進理由與成效"><a href="#有測量數據，有明確的改進理由與成效" class="headerlink" title="有測量數據，有明確的改進理由與成效"></a>有測量數據，有明確的改進理由與成效</h2><p>If you can&#39;t measure it, you can&#39;t improve it.</p><p>選出好的測量數據當改善的指標非常重要，比方說Google測量使用者停留在搜尋結果的情況來判斷搜尋的品質</p><ul><li>測量生產力 &gt; 工時</li><li>頁面停留時間（long-click） vs. 點擊率<br>點擊率高有些情況也可能是使用者在找功能，而long-click以Google搜尋來說，最好的情況是使用者點第一個連結，沒有再回來搜尋結果頁面</li><li>平均回應時間 vs. 95th or 99th 百分比的回應時間<br>選擇不同的數據當指標，要改善的地方會不同，想要達成的目標可能也不一樣</li></ul><h2 id="盡可能的把裝況、發生什麼事情等等的所有事情的都顯示出來"><a href="#盡可能的把裝況、發生什麼事情等等的所有事情的都顯示出來" class="headerlink" title="盡可能的把裝況、發生什麼事情等等的所有事情的都顯示出來"></a>盡可能的把裝況、發生什麼事情等等的所有事情的都顯示出來</h2><p>要像開飛機會有一堆儀表板可以看，要知道自己的服務的狀況，以免出事情或是要擴展等等都不知道自己服務的情況</p><h2 id="專案延時會因為讓目標要達成的時間去修改了預估的時間"><a href="#專案延時會因為讓目標要達成的時間去修改了預估的時間" class="headerlink" title="專案延時會因為讓目標要達成的時間去修改了預估的時間"></a>專案延時會因為讓目標要達成的時間去修改了預估的時間</h2><ul><li>把task拆成小的task</li><li>估時要根據要花多久時間完成而不是希望多久完成</li><li>估時應該像是機率，而不是總是出現最好的情況</li><li>讓實際要做該項task的人估時</li><li>小心錨定效應，估計某一個task最快完成時間後其他東西也用前面錨定的時間繼續估計</li><li>找多種方式去估時同一個task</li><li>小心人月估算，人多不一定快</li><li>根據歷史的估時，來驗證現在的估時</li><li>研究東西可以研究無限久，考慮給定一個時間來看有什麼樣的結果來竟可能的做最好的選擇</li><li>讓其他人chanllenge估時</li></ul><h2 id="給定明確的目標與milestone"><a href="#給定明確的目標與milestone" class="headerlink" title="給定明確的目標與milestone"></a>給定明確的目標與milestone</h2><p>比方說，降低第95th百分比的延遲時間到500ms以內</p><p>比較模糊不清比較不好的，在一個月內重寫某某程式</p><h2 id="把時程估計列入專案的計畫"><a href="#把時程估計列入專案的計畫" class="headerlink" title="把時程估計列入專案的計畫"></a>把時程估計列入專案的計畫</h2><ul><li>可以決定在一個時間點是否可以有哪些功能，如果時間點不行，則討論該時間點應該要先有哪些重要的功能</li><li>時程規劃要有緩衝，要把假期、生病等等的時間也估算進來</li><li>先把有風險的工作做掉，先做簡單的可能會有進度很快的假象</li><li>只有在很確定加班趕得上時程的時候才使用加班</li></ul><h2 id="code-review與測試不一定是要做與不做的選擇"><a href="#code-review與測試不一定是要做與不做的選擇" class="headerlink" title="code review與測試不一定是要做與不做的選擇"></a>code review與測試不一定是要做與不做的選擇</h2><p>可以只在很重要的地方做code review跟測試，資源有限的情況下不重要的就先跳過</p><h2 id="好的batch應該要是重複執行也會得到一樣的結果"><a href="#好的batch應該要是重複執行也會得到一樣的結果" class="headerlink" title="好的batch應該要是重複執行也會得到一樣的結果"></a>好的batch應該要是重複執行也會得到一樣的結果</h2><p>好的batch即使執行時某些地方壞掉了需要調整，調整後可以再執行一次仍然得到同樣的結果</p><p>或是至少可以retry</p><h2 id="計畫一個失敗了以後仍然能很快的復原的模式"><a href="#計畫一個失敗了以後仍然能很快的復原的模式" class="headerlink" title="計畫一個失敗了以後仍然能很快的復原的模式"></a>計畫一個失敗了以後仍然能很快的復原的模式</h2><p>失敗了可以很快復原，會比較有信心且大膽的前進</p><p>比方說用版本控制系統，寫錯了就回上一版。上線的系統仍然有bug，能很快的回上一個沒有bug的版本</p><h2 id="公司的成功會很大的影響個人的成功"><a href="#公司的成功會很大的影響個人的成功" class="headerlink" title="公司的成功會很大的影響個人的成功"></a>公司的成功會很大的影響個人的成功</h2><p>Andy Rachleff: You get more credit than you deserve for being part of a successful company, and less credit than you deserve for being part of an unsuccessful company</p><h2 id="如何循序的改善面試流程"><a href="#如何循序的改善面試流程" class="headerlink" title="如何循序的改善面試流程"></a>如何循序的改善面試流程</h2><ul><li>跟組員一同找出將來的組員要有哪些重要的特質</li><li>週期性的回顧目前的流程是否有效</li><li>設計不同難度的問題來看面試者的程度</li><li>目的是要多了解面試者，可以在一些地方給提示，或換問題，不要在一些地方卡太久</li><li>週期性的找其他組員一起參與面試，看有沒有流程要改善</li></ul><h2 id="入職訓練"><a href="#入職訓練" class="headerlink" title="入職訓練"></a>入職訓練</h2><ul><li>定出目標</li><li>找出該怎麼達成目標</li></ul><p>可能會有mentorship，可能會有onboarding talk介紹工具等等，可能回有個適合的小task來進入專案，看目標是什麼</p><h2 id="不要讓一件事情只有一個人能做，share-ownership-of-code"><a href="#不要讓一件事情只有一個人能做，share-ownership-of-code" class="headerlink" title="不要讓一件事情只有一個人能做，share ownership of code"></a>不要讓一件事情只有一個人能做，share ownership of code</h2><p>真的有事情急需要救火的時候，萬一能做的人手邊也沒電腦就完了，或是請假，人事變動等等的</p><h2 id="回顧工作，蒐集智慧"><a href="#回顧工作，蒐集智慧" class="headerlink" title="回顧工作，蒐集智慧"></a>回顧工作，蒐集智慧</h2><p>下次怎麼樣做更好，分享給不同的團隊以免重複採坑</p><h2 id="對於前公司工程的文化上哪一點喜歡與哪一點不喜歡"><a href="#對於前公司工程的文化上哪一點喜歡與哪一點不喜歡" class="headerlink" title="對於前公司工程的文化上哪一點喜歡與哪一點不喜歡"></a>對於前公司工程的文化上哪一點喜歡與哪一點不喜歡</h2><p>可以知道彼此適不適合，也可以知道哪些東西會讓員工不喜歡</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;個人的全書總結，整本書圍繞著有很多事情要做，在選擇不同的事情上，選擇上應該多著重在長遠的、有效的來當戰略，而不是與之相反的在短期的、只著重在效率上的戰術。&lt;br&gt;這裡的有效（effective）與策略（strategy）指的是長遠來看效益很高、會隨時間有著槓桿（leverage）成長的。&lt;br&gt;這裡的有效率（efficiency）與戰術（tactic）指的是短期的、以快速為目的達成目標。&lt;br&gt;基本上高手講的都一樣，不要用戰術上的勤勞掩蓋戰略上的懶惰，好的戰術可以打贏一場戰役，好的戰略可以打贏一場戰爭。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Software Development" scheme="https://thiswayne.github.io/tags/Software-Development/"/>
    
      <category term="Reading" scheme="https://thiswayne.github.io/tags/Reading/"/>
    
  </entry>
  
  <entry>
    <title>C#的Async &amp; Await筆記(2)</title>
    <link href="https://thiswayne.github.io/posts/csharp-async-await-note-2/"/>
    <id>https://thiswayne.github.io/posts/csharp-async-await-note-2/</id>
    <published>2019-12-17T22:36:22.000Z</published>
    <updated>2022-12-04T09:14:49.207Z</updated>
    
    <content type="html"><![CDATA[<p>既上一篇的一些觀念，來寫一些程式來實際驗證一下C#不同類型的專案上<code>async</code>/<code>await</code>跑起來會怎麼運作，執行緒會怎麼樣調用。</p><a id="more"></a><h2 id="TL-DR，執行緒調用方式"><a href="#TL-DR，執行緒調用方式" class="headerlink" title="TL;DR，執行緒調用方式"></a>TL;DR，執行緒調用方式</h2><p>上一篇<a href="../csharp-async-await-note/">C#的Async &amp; Await筆記</a>有較多的概念</p><p>這一篇的程式碼在這<a href="https://github.com/ThisWayne/csharp-lab" target="_blank" rel="noopener">csharp-lab</a></p><ol><li>一遇到<code>await</code>，執行緒不會馬上跳回到caller端，執行緒還是會往呼叫的methodAsync執行，直到最底層回傳一個<code>Task</code>，才開始依序跳回caller端，但如果<code>Task</code>已經是完成的狀態，則會省去原<code>await</code>機制，用原執行緒繼續執行。</li><li>一般<code>Task</code>不是已經完成的狀態下，遇到<code>await</code>，會優先看「當前」執行緒上有沒有<code>SynchronizationContext</code>，有則<code>await</code>後續的code會是原執行緒main thread來執行；沒有則<code>await</code>後續的code由thread pool裡面的執行緒執行。</li><li>一般<code>Task</code>不是已經完成的狀態下，遇到<code>await</code>加上<code>ConfigureAwait(false)</code>，則<code>await</code>後續的code會由thread pool裡面的執行緒執行。</li></ol><h2 id="執行環境"><a href="#執行環境" class="headerlink" title="執行環境"></a>執行環境</h2><h3 id="硬體"><a href="#硬體" class="headerlink" title="硬體"></a>硬體</h3><ul><li>CPU：4 * Intel i7-6600U 2.6GHz</li><li>RAM： 16.0 GB</li><li>系統類型： x64</li><li>作業系統：Windows 10</li></ul><h3 id="測試的project類型與target-framework"><a href="#測試的project類型與target-framework" class="headerlink" title="測試的project類型與target framework"></a>測試的project類型與target framework</h3><ul><li>Console App： .NET Framework 4.6.1</li><li>WPF： .NET Framework 4.6.1</li><li>.NET Framework Web API： .NET Framework 4.6.1</li><li>.NET Core Web API： .NET Core 2.1.1</li></ul><h2 id="測試方式"><a href="#測試方式" class="headerlink" title="測試方式"></a>測試方式</h2><ol><li>寫了一個library project <code>TestClassLibrary</code>裡面放一個<code>AsyncAwaitTestClass.cs</code>，所有要跑的code都寫在裡面，可以給.NET Framework和.NET Core參照與使用</li><li>下面跑測試會個別跑，會先註解掉其他測試來讓執行測試的起始情況一致</li><li>測試有寫的四種project類型，測試上不一樣的地方主要是WPF的main thread有<code>SynchronizationContext</code>，其他測試上的差別只有起始thread像WPF、Console App是main thread，還是像web server是調用worker thread的差別</li><li>因為有無<code>SynchronizationContext</code>，基本上只會有兩種較不一樣的執行結果，下面只寫出WPF和.NET Core的結果，想執行看看都還是可以抓回去玩玩看</li><li>印出測試訊息用<code>Debug.WriteLine</code>寫在output讓不同的project類型都會在同一個地方印出來，會透過執行<code>AsyncAwaitTestClass.PrintInfos</code>印出執行的當下有多少worker threads、iocp threads、total threads，印出當下執行緒的<code>SynchronizationContext</code>、<code>ManagedThreadId</code>、<code>IsThreadPoolThread</code>。</li></ol><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">PrintInfos</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ThreadPool.GetMaxThreads(<span class="keyword">out</span> <span class="keyword">int</span> maxWorkerThreads, <span class="keyword">out</span> <span class="keyword">int</span> maxCompletionPortThreads);</span><br><span class="line">    ThreadPool.GetAvailableThreads(<span class="keyword">out</span> <span class="keyword">int</span> workerThreads, <span class="keyword">out</span> <span class="keyword">int</span> completionPortThreads);</span><br><span class="line">    Debug.WriteLine(</span><br><span class="line">        <span class="string">"  -- Worker threads: &#123;0&#125;, Completion port threads: &#123;1&#125;, Total threads: &#123;2&#125;"</span>,</span><br><span class="line">        maxWorkerThreads - workerThreads,</span><br><span class="line">        maxCompletionPortThreads - completionPortThreads,</span><br><span class="line">        Process.GetCurrentProcess().Threads.Count</span><br><span class="line">    );</span><br><span class="line">    Debug.WriteLine(</span><br><span class="line">        <span class="string">$"     SynchronizationContext: <span class="subst">&#123;SynchronizationContext.Current&#125;</span>\n"</span> +</span><br><span class="line">        <span class="string">$"     ManagedThreadId: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>\n"</span> +</span><br><span class="line">        <span class="string">$"     IsThreadPoolThread: <span class="subst">&#123;Thread.CurrentThread.IsThreadPoolThread&#125;</span>"</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試一：執行續一遇到await就返回呼叫端？"><a href="#測試一：執行續一遇到await就返回呼叫端？" class="headerlink" title="測試一：執行續一遇到await就返回呼叫端？"></a>測試一：執行續一遇到<code>await</code>就返回呼叫端？</h2><h3 id="1-程式碼"><a href="#1-程式碼" class="headerlink" title="(1)程式碼"></a>(1)程式碼</h3><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 1 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before ReturnFinishedTaskAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">    <span class="keyword">await</span> ReturnFinishedTaskAsync();</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 1 End ====="</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="keyword">int</span>&gt; <span class="title">ReturnFinishedTaskAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"2.   === Begin MethodWithFinishedTask ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> Task.FromResult&lt;<span class="keyword">int</span>&gt;(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-執行結果"><a href="#1-執行結果" class="headerlink" title="(1)執行結果"></a>(1)執行結果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 10</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test Start =====</span><br><span class="line">===== Test 1 =====</span><br><span class="line">1. === Before ReturnFinishedTaskAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 10</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2.   === Begin MethodWithFinishedTask ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 10</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 1 End =====</span><br></pre></td></tr></table></figure><p>不是一看到<code>await</code>，當前thread就跳回到caller，<code>await</code>裡面的code還是會先由當前thread執行，會直到執行到底層傳回task才「通常」開始一層一層返回caller。</p><p>可以在output上看到<code>RunTest1</code>的<code>1.</code>跟<code>ReturnFinishedTaskAsync</code>裡面的<code>2.</code>都是同一個thread ID，四種project結果都一樣。<br>其實想成下面這樣，程式是一樣的，應該就直覺async method裡面也會是同一個thread先執行。</p><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 1 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before ReturnFinishedTaskAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">    <span class="keyword">var</span> task = ReturnFinishedTaskAsync(); <span class="comment">// 這裡把await分開來寫</span></span><br><span class="line">    <span class="keyword">await</span> task;</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 1 End ====="</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="測試二：await加不加ConfigureAwait-false-會發生什麼事，後續執行緒是？"><a href="#測試二：await加不加ConfigureAwait-false-會發生什麼事，後續執行緒是？" class="headerlink" title="測試二：await加不加ConfigureAwait(false)會發生什麼事，後續執行緒是？"></a>測試二：<code>await</code>加不加<code>ConfigureAwait(false)</code>會發生什麼事，後續執行緒是？</h2><h3 id="2-1-不加ConfigureAwait-false"><a href="#2-1-不加ConfigureAwait-false" class="headerlink" title="(2.1)不加ConfigureAwait(false)"></a>(2.1)不加<code>ConfigureAwait(false)</code></h3><h4 id="2-1-程式碼"><a href="#2-1-程式碼" class="headerlink" title="(2.1)程式碼"></a>(2.1)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.1 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> httpClient.GetStringAsync(url); <span class="comment">// without ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === After httpClient.GetStringAsync  ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-1-執行結果"><a href="#2-1-執行結果" class="headerlink" title="(2.1)執行結果"></a>(2.1)執行結果</h4><h5 id="2-1-WPF"><a href="#2-1-WPF" class="headerlink" title="(2.1)WPF"></a>(2.1)WPF</h5><p>執行<code>httpClient.GetStringAsync</code>前後的code會是一樣的thread</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.1 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === After httpClient.GetStringAsync  ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 28</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br></pre></td></tr></table></figure><h5 id="2-1-NET-Core-Web-API"><a href="#2-1-NET-Core-Web-API" class="headerlink" title="(2.1).NET Core Web API"></a>(2.1).NET Core Web API</h5><p>執行<code>httpClient.GetStringAsync</code>前後的code是不一樣的thread，後面是iocp thread</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 23</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 16</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.1 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 23</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 16</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === After httpClient.GetStringAsync  ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 24</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 22</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="2-2-加ConfigureAwait-false"><a href="#2-2-加ConfigureAwait-false" class="headerlink" title="(2.2)加ConfigureAwait(false)"></a>(2.2)加<code>ConfigureAwait(false)</code></h3><h4 id="2-2-程式碼"><a href="#2-2-程式碼" class="headerlink" title="(2.2)程式碼"></a>(2.2)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.2 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> httpClient.GetStringAsync(url).ConfigureAwait(<span class="literal">false</span>); <span class="comment">// with ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === After httpClient.GetStringAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos(); <span class="comment">// 1. and 2. would be different thread ID</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2-執行結果"><a href="#2-2-執行結果" class="headerlink" title="(2.2)執行結果"></a>(2.2)執行結果</h4><h5 id="2-2-WPF"><a href="#2-2-WPF" class="headerlink" title="(2.2)WPF"></a>(2.2)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 14</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.2 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 14</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 26</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h5 id="2-2-NET-Core-Web-API"><a href="#2-2-NET-Core-Web-API" class="headerlink" title="(2.2).NET Core Web API"></a>(2.2).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.2 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="2-3-加ConfigureAwait-false-後面一定會是iocp-thread？"><a href="#2-3-加ConfigureAwait-false-後面一定會是iocp-thread？" class="headerlink" title="(2.3)加ConfigureAwait(false)後面一定會是iocp thread？"></a>(2.3)加<code>ConfigureAwait(false)</code>後面一定會是iocp thread？</h3><h4 id="2-3-程式碼"><a href="#2-3-程式碼" class="headerlink" title="(2.3)程式碼"></a>(2.3)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_3</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.3 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before ReturnFinishedTaskAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> ReturnFinishedTaskAsync().ConfigureAwait(<span class="literal">false</span>); <span class="comment">// with ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"3. === After ReturnFinishedTaskAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3-執行結果"><a href="#2-3-執行結果" class="headerlink" title="(2.3)執行結果"></a>(2.3)執行結果</h4><p>如果跑的不是非同步IO當然不會是iocp thread</p><p>如果<code>Task</code>已經是完成的狀態，則會省去原<code>await</code>機制，用原執行緒繼續執行</p><h5 id="2-3-WPF"><a href="#2-3-WPF" class="headerlink" title="(2.3)WPF"></a>(2.3)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.3 =====</span><br><span class="line">1. === Before ReturnFinishedTaskAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2.   === Begin MethodWithFinishedTask ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">3. === After ReturnFinishedTaskAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br></pre></td></tr></table></figure><h5 id="2-3-NET-Core-Web-API"><a href="#2-3-NET-Core-Web-API" class="headerlink" title="(2.3).NET Core Web API"></a>(2.3).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 23</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.3 =====</span><br><span class="line">1. === Before ReturnFinishedTaskAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 23</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2.   === Begin MethodWithFinishedTask ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 23</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After ReturnFinishedTaskAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 23</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="2-4-連續兩個await呼叫有加ConfigureAwait-false"><a href="#2-4-連續兩個await呼叫有加ConfigureAwait-false" class="headerlink" title="(2.4)連續兩個await呼叫有加ConfigureAwait(false)"></a>(2.4)連續兩個<code>await</code>呼叫有加<code>ConfigureAwait(false)</code></h3><h4 id="2-4-程式碼"><a href="#2-4-程式碼" class="headerlink" title="(2.4)程式碼"></a>(2.4)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_4</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.4 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> httpClient.GetStringAsync(url).ConfigureAwait(<span class="literal">false</span>); <span class="comment">// with ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === After httpClient.GetStringAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> httpClient.GetStringAsync(url).ConfigureAwait(<span class="literal">false</span>); <span class="comment">// with ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"3. === After httpClient.GetStringAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-執行結果"><a href="#2-4-執行結果" class="headerlink" title="(2.4)執行結果"></a>(2.4)執行結果</h4><p>這邊訊息的2.跟3.有可能會是同一個iocp thread，畢竟我都對同一個URL發HTTP GET，有可能是cache導致<code>Task</code>很快就完成了，或是真的第二個<code>await</code>真的接手的thread跟第一個一樣</p><h5 id="2-4-WPF"><a href="#2-4-WPF" class="headerlink" title="(2.4)WPF"></a>(2.4)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.4 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h5 id="2-4-NET-Core-Web-API"><a href="#2-4-NET-Core-Web-API" class="headerlink" title="(2.4).NET Core Web API"></a>(2.4).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 29</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 15</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.4 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 29</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 15</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 20</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 17</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="2-5-先呼叫一個await有加ConfigureAwait-false-，然後再呼叫一個await不加ConfigureAwait-false-？"><a href="#2-5-先呼叫一個await有加ConfigureAwait-false-，然後再呼叫一個await不加ConfigureAwait-false-？" class="headerlink" title="(2.5)先呼叫一個await有加ConfigureAwait(false)，然後再呼叫一個await不加ConfigureAwait(false)？"></a>(2.5)先呼叫一個<code>await</code>有加<code>ConfigureAwait(false)</code>，然後再呼叫一個<code>await</code>不加<code>ConfigureAwait(false)</code>？</h3><h4 id="2-5-程式碼"><a href="#2-5-程式碼" class="headerlink" title="(2.5)程式碼"></a>(2.5)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_5</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.5 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> httpClient.GetStringAsync(url).ConfigureAwait(<span class="literal">false</span>); <span class="comment">// with ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === After httpClient.GetStringAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> httpClient.GetStringAsync(url); <span class="comment">// without ConfigureAwait(false)</span></span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"3. === After httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5-執行結果"><a href="#2-5-執行結果" class="headerlink" title="(2.5)執行結果"></a>(2.5)執行結果</h4><p>WPF的第一個<code>httpClient.GetStringAsync</code>有加<code>ConfigureAwait(false)</code>，所以<code>await</code>接手的會是iocp thread，可以看到2.的訊息顯示沒有<code>SynchronizationContext</code>，所以第二個<code>httpClient.GetStringAsync</code>即使沒有加<code>ConfigureAwait(false)</code>，後續的code也不會是main thread</p><h5 id="2-5-WPF"><a href="#2-5-WPF" class="headerlink" title="(2.5)WPF"></a>(2.5)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 20</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.5 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 20</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 11</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h5 id="2-5-NET-Core-Web-API"><a href="#2-5-NET-Core-Web-API" class="headerlink" title="(2.5).NET Core Web API"></a>(2.5).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.5 =====</span><br><span class="line">1. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="2-6-外面的沒加ConfigureAwait-false-，裡面的有加"><a href="#2-6-外面的沒加ConfigureAwait-false-，裡面的有加" class="headerlink" title="(2.6)外面的沒加ConfigureAwait(false)，裡面的有加"></a>(2.6)外面的沒加<code>ConfigureAwait(false)</code>，裡面的有加</h3><h4 id="2-6-程式碼"><a href="#2-6-程式碼" class="headerlink" title="(2.6)程式碼"></a>(2.6)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_6</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.6 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before MethodWithConfigureAwaitFalseInsideAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> MethodWithConfigureAwaitFalseInsideAsync();</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"4. === After MethodWithConfigureAwaitFalseInsideAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">MethodWithConfigureAwaitFalseInsideAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === Before httpClient.GetStringAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> httpClient.GetStringAsync(url).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"3. === After httpClient.GetStringAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-6-執行結果"><a href="#2-6-執行結果" class="headerlink" title="(2.6)執行結果"></a>(2.6)執行結果</h4><p>在外層WPF因為有<code>SynchronizationContext</code>所以<code>await</code>後續還是main thread，.NET Core沒有<code>SynchronizationContext</code>所以裡面最後是iocp thread，外層也是iocp thread繼續 </p><h5 id="2-6-WPF"><a href="#2-6-WPF" class="headerlink" title="(2.6)WPF"></a>(2.6)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.6 =====</span><br><span class="line">1. === Before MethodWithConfigureAwaitFalseInsideAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === Before httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">3. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 11</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">4. === After MethodWithConfigureAwaitFalseInsideAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 28</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br></pre></td></tr></table></figure><h5 id="2-6-NET-Core-Web-API"><a href="#2-6-NET-Core-Web-API" class="headerlink" title="(2.6).NET Core Web API"></a>(2.6).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 29</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.6 =====</span><br><span class="line">1. === Before MethodWithConfigureAwaitFalseInsideAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 29</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === Before httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 29</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After httpClient.GetStringAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 16</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">4. === After MethodWithConfigureAwaitFalseInsideAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 30</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 16</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="2-7-外面的有加ConfigureAwait-false-，裡面的沒加"><a href="#2-7-外面的有加ConfigureAwait-false-，裡面的沒加" class="headerlink" title="(2.7)外面的有加ConfigureAwait(false)，裡面的沒加"></a>(2.7)外面的有加<code>ConfigureAwait(false)</code>，裡面的沒加</h3><h4 id="2-7-程式碼"><a href="#2-7-程式碼" class="headerlink" title="(2.7)程式碼"></a>(2.7)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest2_7</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 2.7 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before MethodWithoutConfigureAwaitFalseInsideAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> MethodWithoutConfigureAwaitFalseInsideAsync().ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"4. === After MethodWithoutConfigureAwaitFalseInsideAsync ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">MethodWithoutConfigureAwaitFalseInsideAsync</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === Before httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> result = <span class="keyword">await</span> httpClient.GetStringAsync(url);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"3. === After httpClient.GetStringAsync ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-執行結果"><a href="#2-7-執行結果" class="headerlink" title="(2.7)執行結果"></a>(2.7)執行結果</h4><p>WPF因為裡面的沒加<code>ConfigureAwait(false)</code>，所以<code>await</code>後續接手會是main thread，裡面最後執行完的是main thread，外層的有加<code>ConfigureAwait(false)</code>，不交由main thread執行<code>ConfigureAwait(false)</code>的後續，所以由worker thread接手</p><h5 id="2-7-WPF"><a href="#2-7-WPF" class="headerlink" title="(2.7)WPF"></a>(2.7)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 2.7 =====</span><br><span class="line">1. === Before MethodWithoutConfigureAwaitFalseInsideAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">3. === After httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 28</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">4. === After MethodWithoutConfigureAwaitFalseInsideAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 28</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 5</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h5 id="2-7-NET-Core-Web-API"><a href="#2-7-NET-Core-Web-API" class="headerlink" title="(2.7).NET Core Web API"></a>(2.7).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 31</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 2.7 =====</span><br><span class="line">1. === Before MethodWithoutConfigureAwaitFalseInsideAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 31</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === Before httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 31</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 9</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">3. === After httpClient.GetStringAsync ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 32</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">4. === After MethodWithoutConfigureAwaitFalseInsideAsync ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 1, Total threads: 32</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 12</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h2 id="測試三：承測試二，如果不跑在IO相關的task，而跑在Task-Delay上，後續執行緒是？"><a href="#測試三：承測試二，如果不跑在IO相關的task，而跑在Task-Delay上，後續執行緒是？" class="headerlink" title="測試三：承測試二，如果不跑在IO相關的task，而跑在Task.Delay上，後續執行緒是？"></a>測試三：承測試二，如果不跑在IO相關的task，而跑在<code>Task.Delay</code>上，後續執行緒是？</h2><h3 id="3-1-不加ConfigureAwait-false"><a href="#3-1-不加ConfigureAwait-false" class="headerlink" title="(3.1)不加ConfigureAwait(false)"></a>(3.1)不加<code>ConfigureAwait(false)</code></h3><h4 id="3-1-程式碼"><a href="#3-1-程式碼" class="headerlink" title="(3.1)程式碼"></a>(3.1)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest3_1</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 3.1 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before Task.Delay ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === After Task.Delay ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-1-執行結果"><a href="#3-1-執行結果" class="headerlink" title="(3.1)執行結果"></a>(3.1)執行結果</h4><h5 id="3-1-WPF"><a href="#3-1-WPF" class="headerlink" title="(3.1)WPF"></a>(3.1)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 18</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 3.1 =====</span><br><span class="line">1. === Before Task.Delay ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 18</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === After Task.Delay ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 20</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br></pre></td></tr></table></figure><h5 id="3-1-NET-Core-Web-API"><a href="#3-1-NET-Core-Web-API" class="headerlink" title="(3.1).NET Core Web API"></a>(3.1).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 3.1 =====</span><br><span class="line">1. === Before Task.Delay ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === After Task.Delay ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h3 id="3-2-加ConfigureAwait-false"><a href="#3-2-加ConfigureAwait-false" class="headerlink" title="(3.2)加ConfigureAwait(false)"></a>(3.2)加<code>ConfigureAwait(false)</code></h3><h4 id="3-2-程式碼"><a href="#3-2-程式碼" class="headerlink" title="(3.2)程式碼"></a>(3.2)程式碼</h4><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task <span class="title">RunTest3_2</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Debug.WriteLine(<span class="string">"===== Test 3.2 ====="</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"1. === Before Task.Delay ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> Task.Delay(<span class="number">1000</span>).ConfigureAwait(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    Debug.WriteLine(<span class="string">"2. === After Task.Delay ConfigureAwait(false) ==="</span>);</span><br><span class="line">    PrintInfos();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2-執行結果"><a href="#3-2-執行結果" class="headerlink" title="(3.2)執行結果"></a>(3.2)執行結果</h4><h5 id="3-2-WPF"><a href="#3-2-WPF" class="headerlink" title="(3.2)WPF"></a>(3.2)WPF</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">===== Test 3.2 =====</span><br><span class="line">1. === Before Task.Delay ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 0, Completion port threads: 0, Total threads: 19</span><br><span class="line">     SynchronizationContext: System.Windows.Threading.DispatcherSynchronizationContext</span><br><span class="line">     ManagedThreadId: 1</span><br><span class="line">     IsThreadPoolThread: False</span><br><span class="line">2. === After Task.Delay ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 21</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 5</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h5 id="3-2-NET-Core-Web-API"><a href="#3-2-NET-Core-Web-API" class="headerlink" title="(3.2).NET Core Web API"></a>(3.2).NET Core Web API</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">===== Current Thread Info (in TestStart method) =====</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">===== Test 3.2 =====</span><br><span class="line">1. === Before Task.Delay ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br><span class="line">2. === After Task.Delay ConfigureAwait(false) ===</span><br><span class="line">  -- Worker threads: 1, Completion port threads: 0, Total threads: 25</span><br><span class="line">     SynchronizationContext: </span><br><span class="line">     ManagedThreadId: 10</span><br><span class="line">     IsThreadPoolThread: True</span><br></pre></td></tr></table></figure><h2 id="程式碼source-code"><a href="#程式碼source-code" class="headerlink" title="程式碼source code"></a>程式碼source code</h2><p><a href="https://github.com/ThisWayne/csharp-lab" target="_blank" rel="noopener">csharp-lab</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;既上一篇的一些觀念，來寫一些程式來實際驗證一下C#不同類型的專案上&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;跑起來會怎麼運作，執行緒會怎麼樣調用。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://thiswayne.github.io/tags/C/"/>
    
      <category term="async&amp;await" scheme="https://thiswayne.github.io/tags/async-await/"/>
    
  </entry>
  
  <entry>
    <title>軟體開發建構筆記</title>
    <link href="https://thiswayne.github.io/posts/general-software-development-process/"/>
    <id>https://thiswayne.github.io/posts/general-software-development-process/</id>
    <published>2019-12-06T03:00:02.000Z</published>
    <updated>2022-12-04T09:14:49.207Z</updated>
    
    <content type="html"><![CDATA[<p>紀錄一下軟體工程的每個專案／產品通常都會有以及應該要有的一些過程</p><a id="more"></a><h2 id="mindset"><a href="#mindset" class="headerlink" title="mindset"></a>mindset</h2><ul><li>價值優先，優先做有價值的／長期有複利效應的工作<ul><li>早點雇用到好用的員工、新進員工能早點上手就是可能長期有複利效應的工作</li></ul></li><li>如何快速迭代，fail fast<ul><li>太晚跟客戶確認需求與實作出來的東西，方向錯了走的路都是浪費</li></ul></li></ul><h2 id="需求文件／規格"><a href="#需求文件／規格" class="headerlink" title="需求文件／規格"></a>需求文件／規格</h2><ul><li>User Story</li><li>模組功能</li><li>角色／使用權限</li><li>要蒐集／測量哪些資料，什麼樣的資料當指標可以很好的解釋市場／使用者行為<ul><li>使用者行為的資料</li><li>維運需要的資料</li></ul></li><li>畫面設計的準則</li><li>畫面／功能的等待時間</li><li>同時可服務人數</li><li>推播訊息，推播同時最大人數／頻率／即時性</li><li>服務的SLA，SLA的定義</li></ul><h2 id="專案管理"><a href="#專案管理" class="headerlink" title="專案管理"></a>專案管理</h2><ul><li>進度</li><li>怎麼追蹤feature/issue/bug，怎麼與版本控制的commit結合</li><li>怎麼分配ticket</li></ul><h2 id="設計文件"><a href="#設計文件" class="headerlink" title="設計文件"></a>設計文件</h2><ul><li>依照需求推算出的系統需求</li><li>系統架構<ul><li>傳輸協定</li></ul></li></ul><h2 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h2><h3 id="開發環境"><a href="#開發環境" class="headerlink" title="開發環境"></a>開發環境</h3><ul><li>IDE</li><li>程式撰寫風格準則</li><li>套件檢查程式碼準則</li></ul><h3 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h3><ul><li>Git／SVN</li><li>程式碼存放處</li><li>版本控管的流程<ul><li>Git Flow／其他設計</li></ul></li></ul><h3 id="使用者介面端"><a href="#使用者介面端" class="headerlink" title="使用者介面端"></a>使用者介面端</h3><h4 id="Web-App"><a href="#Web-App" class="headerlink" title="Web App"></a>Web App</h4><ul><li>對RWD的要求</li><li>對不同瀏覽器的要求</li><li>對SEO的要求</li><li>對無障礙設計的要求</li><li>PWA</li><li>SPA，優缺點，是否適用</li><li>JavaScript框架</li><li>CSS preprocessor</li><li>打包，壓縮，CDN</li><li>i18n，l10n</li></ul><h4 id="Mobile-App"><a href="#Mobile-App" class="headerlink" title="Mobile App"></a>Mobile App</h4><ul><li>要支援的平台Android／iOS</li><li>平台的要支援版本</li><li>要用Native App／Hybrid App／還是其他產生App的方式開發</li><li>發佈，上架</li></ul><h3 id="伺服器端"><a href="#伺服器端" class="headerlink" title="伺服器端"></a>伺服器端</h3><ul><li>HTTPS</li><li>選語言、框架、ORM</li><li>不同端點的傳輸協定TCP／UDP／MQTT等等</li><li>使用者註冊，驗證(authentication)，MFA，忘記密碼，session／JWT等等，OAuth，SSO</li><li>RESTful API設計</li><li>API的即時文件，swagger</li><li>設計錯誤處理、API回應、log</li><li>是否已經要scale out</li><li>load balance</li><li>message queue接收事件</li><li>worker處理事件</li><li>行動端的推播訊息</li><li>i18n，l10n</li></ul><h3 id="資料庫端"><a href="#資料庫端" class="headerlink" title="資料庫端"></a>資料庫端</h3><ul><li>哪些／多少資料要存SQL／NoSQL</li><li>哪些／多少資料要cache，cache策略</li><li>哪些資料要用index</li><li>哪些資料做正規化</li><li>哪些資料不做正規化</li><li>是否要scale out， 依需求考量CAP然後選適用的資料庫／服務</li><li>怎麼樣做對Machine Learning時資料比較好處理</li></ul><h3 id="CI-CD"><a href="#CI-CD" class="headerlink" title="CI/CD"></a>CI/CD</h3><ul><li>檢查是否有不符合準則的程式碼</li><li>自動compile</li><li>自動測試</li><li>自動佈署</li></ul><h3 id="雲端"><a href="#雲端" class="headerlink" title="雲端"></a>雲端</h3><ul><li>選平台AWS/GCP/Azure</li></ul><h3 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h3><ul><li>整理資料</li><li>訓練模型</li><li>佈署</li></ul><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><ul><li>單元測試</li><li>功能測試</li><li>整合測試</li><li>資安測試<ul><li>OWASP</li></ul></li><li>壓力測試</li></ul><h2 id="報表"><a href="#報表" class="headerlink" title="報表"></a>報表</h2><h2 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h2><h2 id="研究資料"><a href="#研究資料" class="headerlink" title="研究資料"></a>研究資料</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;紀錄一下軟體工程的每個專案／產品通常都會有以及應該要有的一些過程&lt;/p&gt;
    
    </summary>
    
    
      <category term="Software Development" scheme="https://thiswayne.github.io/tags/Software-Development/"/>
    
  </entry>
  
  <entry>
    <title>Time Gem YouTube player</title>
    <link href="https://thiswayne.github.io/posts/time-gem-youtube-player/"/>
    <id>https://thiswayne.github.io/posts/time-gem-youtube-player/</id>
    <published>2019-11-16T16:59:07.000Z</published>
    <updated>2022-12-04T09:14:49.207Z</updated>
    
    <content type="html"><![CDATA[<p>我需要這樣的一個網頁的情況是，我本身在學習爵士鼓，有些時候老師會教一首歌怎麼打，但一開始肢體協調性以及對歌不夠熟悉，沒有辦法以歌曲的原速度跟著打鼓，所以會先用慢一點的速度，通常播放的情況是用手機的YouTube APP，而YouTube APP的速度調整只能以0.25倍為單位，我常用的是0.75倍或是1倍，但0.75倍到1倍有時候差太多，通常來說練習會以5~10個BPM慢慢往上加，所以打算寫一個靜態網頁，功能是貼上YouTube網址然後有幾個大按鈕方便手機使用，可以一點一點的加速、可以設定AB段循環。</p><a id="more"></a><h2 id="已知可以控制瀏覽器影片播放器的速度"><a href="#已知可以控制瀏覽器影片播放器的速度" class="headerlink" title="已知可以控制瀏覽器影片播放器的速度"></a>已知可以控制瀏覽器影片播放器的速度</h2><p>用電腦的瀏覽器看YouTube即使調到2倍速有時候還是覺得速度很慢，所以會直接在console寫個JavaScript程式調到想要的速度，所以我應該可以在自己的網頁上用一個iframe把YouTube的影片嵌入在裡面，然後從自己的網頁上看怎麼控制嵌入在裡面的YouTube影片？</p><h2 id="YouTube官方的嵌入影片播放器API"><a href="#YouTube官方的嵌入影片播放器API" class="headerlink" title="YouTube官方的嵌入影片播放器API"></a>YouTube官方的嵌入影片播放器API</h2><p>查了一下，YouTube官方本身就有寫一個如果要嵌入YouTube影片可以用的library</p><p><a href="https://developers.google.com/youtube/iframe_api_reference" target="_blank" rel="noopener">YouTube Player API Reference for iframe Embeds</a><br><a href="https://developers.google.com/youtube/player_parameters" target="_blank" rel="noopener">YouTube Embedded Players and Player Parameters</a></p><h2 id="YouTube在桌面版瀏覽器上播放可以客製化播放速度"><a href="#YouTube在桌面版瀏覽器上播放可以客製化播放速度" class="headerlink" title="YouTube在桌面版瀏覽器上播放可以客製化播放速度"></a>YouTube在桌面版瀏覽器上播放可以客製化播放速度</h2><p>弄到一半發現原來電腦版瀏覽器上播放速度可以0~2倍速度客製化，之前都直接按快捷鍵調整沒發現呵呵，但是手機板的APP還是沒有辦法小刻度的調，用手機的瀏覽器然後選擇電腦版的網頁就可以，不過用手機去操作桌面版很難用就是了。</p><h2 id="如果YouTube的JavaScript-library可以調iframe裡面的YouTube播放器速度，我應該也可以自己寫個JavaScript調iframe裡面的播放器速度？"><a href="#如果YouTube的JavaScript-library可以調iframe裡面的YouTube播放器速度，我應該也可以自己寫個JavaScript調iframe裡面的播放器速度？" class="headerlink" title="如果YouTube的JavaScript library可以調iframe裡面的YouTube播放器速度，我應該也可以自己寫個JavaScript調iframe裡面的播放器速度？"></a>如果YouTube的JavaScript library可以調iframe裡面的YouTube播放器速度，我應該也可以自己寫個JavaScript調iframe裡面的播放器速度？</h2><p>本來一開始因為自己的程式有bug，透過YouTube的library一直控制不到速度，想說乾脆自己從iframe裡面DOM裡面抓video控制影片速度，順便學到了因為會有資安問題所以不能這樣硬幹，網頁與內嵌iframe網頁的溝通方法，要靠<code>Window.postMessage</code>，簡單來說就是網頁透過<code>postMessage</code>把資料傳給內嵌網頁，內嵌網頁透過message event接收資料，用chrome的話可以用<code>monitorEvents(window, &quot;message&quot;)</code>在console來看兩邊溝通的log，以YouTube的情況來看，內嵌網頁會把可以呼叫的interface資訊提供給外面的網頁呼叫，只有他有定義的interface呼叫了有用。</p><h2 id="成品Demo"><a href="#成品Demo" class="headerlink" title="成品Demo"></a>成品Demo</h2><p>只是個小網站，所以沒有用上任何JS框架，也沒有用jQuery，直接用原生DOM API，CSS要針對HTML對應巢狀有點小亂所以後來用Sass寫，整體的layout沒有太複雜的邏輯所以沒有用上media query來做RWD，畫面元件設定最小寬高不要讓手機版手指不好按就好，整體都靠flex做layout。</p><p>有一些比較麻煩的地方反而是YouTube本身給的API不方便使用，要自己寫一些hack來解，像是沒有單獨的API可以直接告訴撥放器撥到哪裡就好，只有讀取並播放影片同時給起始與結束時間的API，但是呼叫那個API影片就又重新下載很浪費網路流量；像是有一個API可以load進影片，但是剛呼叫完就呼叫詢問影片長度的API可能因為還沒有載到影片meta data還沒有準備好所以呼叫失敗，只好自己寫一個setInterval去更新影片長度，有點多餘。</p><p><a href="https://thiswayne.github.io/TimeGemYoutubePlayer/">Time Gem YouTube player</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我需要這樣的一個網頁的情況是，我本身在學習爵士鼓，有些時候老師會教一首歌怎麼打，但一開始肢體協調性以及對歌不夠熟悉，沒有辦法以歌曲的原速度跟著打鼓，所以會先用慢一點的速度，通常播放的情況是用手機的YouTube APP，而YouTube APP的速度調整只能以0.25倍為單位，我常用的是0.75倍或是1倍，但0.75倍到1倍有時候差太多，通常來說練習會以5~10個BPM慢慢往上加，所以打算寫一個靜態網頁，功能是貼上YouTube網址然後有幾個大按鈕方便手機使用，可以一點一點的加速、可以設定AB段循環。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Youtube IFrame API" scheme="https://thiswayne.github.io/tags/Youtube-IFrame-API/"/>
    
      <category term="Youtube Player" scheme="https://thiswayne.github.io/tags/Youtube-Player/"/>
    
      <category term="Drum tool" scheme="https://thiswayne.github.io/tags/Drum-tool/"/>
    
      <category term="Time Gem YouTube player" scheme="https://thiswayne.github.io/tags/Time-Gem-YouTube-player/"/>
    
  </entry>
  
  <entry>
    <title>精準訂價閱讀筆記</title>
    <link href="https://thiswayne.github.io/posts/book-note-confessions-of-the-pricing-man/"/>
    <id>https://thiswayne.github.io/posts/book-note-confessions-of-the-pricing-man/</id>
    <published>2019-11-16T15:25:53.000Z</published>
    <updated>2022-12-04T09:14:49.207Z</updated>
    
    <content type="html"><![CDATA[<p>個人的全書總結，整本書從不同面相探討訂價與獲利：</p><ol><li>從訂價應以買家認知到的價值出發，訂出符合該價值的價格，但書中並不探討價值怎麼算成價格</li><li>從了解買家可能有的心理效應，賣家可以從中有更多獲利，書中探討多種不同的買家心理因素，蠻有趣的</li><li>從「總獲利 = (價格 * 銷量) - (變動成本+固定成本)」出發來討論訂價如何影響獲利，書中舉出很多例子，簡單的數學運算，蠻有趣</li><li>從理論上價格的調整會和銷量成反比的關係出發，鼓勵賣家找到最適當價格來最大化總獲利而不是營收，但如何知道價格與銷量將會呈什麼樣程度的反比並沒有太多解釋</li></ol><p>整本書有些地方並沒有探討得太深，對訂價、控管獲利、行銷有興趣的我覺得可以讀。</p><a id="more"></a><h2 id="買家心理"><a href="#買家心理" class="headerlink" title="買家心理"></a>買家心理</h2><h3 id="寧可在價格上受騙，不要在品質上受騙"><a href="#寧可在價格上受騙，不要在品質上受騙" class="headerlink" title="寧可在價格上受騙，不要在品質上受騙"></a>寧可在價格上受騙，不要在品質上受騙</h3><p>價格太貴，隨著使用時間久了，負面感受可以消失，但是品質不好，用起來就感受一直不好</p><h3 id="買家會把價格當做主要或唯一標準的情況"><a href="#買家會把價格當做主要或唯一標準的情況" class="headerlink" title="買家會把價格當做主要或唯一標準的情況"></a>買家會把價格當做主要或唯一標準的情況</h3><p>買家對商品的真正品質感覺到不確定時，或面對一個完全不了解或很少購買的商品，比方說鎖頭，或是修理水電等等，這種情況可把產品組合重新配置，做出更高或更低的產品與價格差異</p><h3 id="價格的定錨效應"><a href="#價格的定錨效應" class="headerlink" title="價格的定錨效應"></a>價格的定錨效應</h3><p>當買家沒有評估產品的知識或工具，各種來源的資訊就會變成買家心中價格的基準，如果賣家先介紹高價的商品，買家可能就會對各種功能大致要花費多少價格有較高的基準</p><h3 id="中間價格"><a href="#中間價格" class="headerlink" title="中間價格"></a>中間價格</h3><p>同樣是發生在買家沒有評估產品的足夠知識或工具，有三種價格的情況，最低價的怕品質差，最高價又覺得可能超出需求導致花費過高，最後選擇中間價格的產品。<br>如果本來只有賣50元與80元的產品，多賣一個120元的產品可能會導致原先可能選擇50元產品的買家改選擇80元產品，即使120元的產品銷量不一定很好，可能沒有直接的因銷量提升營收，但可能間接的提升了總體買家平均花費，沒有什麼人買的高價商品還是有其價值</p><h3 id="提供額外的選擇提升銷售"><a href="#提供額外的選擇提升銷售" class="headerlink" title="提供額外的選擇提升銷售"></a>提供額外的選擇提升銷售</h3><p>兩種產品組合：<br>A：</p><table><thead><tr><th>甲產品</th><th>乙產品</th></tr></thead><tbody><tr><td>10</td><td>15</td></tr></tbody></table><p>兩種選擇的人數差不多</p><p>B：</p><table><thead><tr><th>甲產品</th><th>乙產品</th><th>甲+乙產品</th></tr></thead><tbody><tr><td>10</td><td>15</td><td>15</td></tr></tbody></table><p>大多數的人會選擇第三種選擇</p><p>用B的產品組合可以提升總體買家平均花費，而且實際上可能很多買家根本用不到乙產品</p><h3 id="價格門檻與尾數9的說法"><a href="#價格門檻與尾數9的說法" class="headerlink" title="價格門檻與尾數9的說法"></a>價格門檻與尾數9的說法</h3><p>有一種理論說，價格到一個數字過一個門檻即會影響銷量，而且通常是整數，為了最大化獲利，所以可能會有99.9元這種價格，還有一種說法是人的閱讀是從左至右，心理上對數字的感受愈右邊愈減弱，或是尾數是9已有特價或折扣的心理效應</p><h3 id="展望理論"><a href="#展望理論" class="headerlink" title="展望理論"></a>展望理論</h3><p>同樣是得到100元與損失100元，心理上得到100元的效用可能是+1，但損失100元的效用可能是-3<br>同樣的金額，信用卡會減少負效用的程度<br>同樣的金額，75元用100元打75折可以減少負效用<br>同樣的金額，$符號或元的放在價錢的最右邊或是不顯示，比較不意識到數字是價格，也有可能減少負效用<br>同樣的金額，如果是在健身房，用年繳可能會比較便宜，但是按月繳可能會更有提醒自己繳錢的事實而提高使用率<br>同樣的金額，現金回饋分月給的正效用可能比一年一次給的正效用高<br>同樣的金額，不同的情境可能有不同的做法有最大效用</p><h2 id="訂價策略"><a href="#訂價策略" class="headerlink" title="訂價策略"></a>訂價策略</h2><h3 id="同質產品中，一線品牌面對競爭對手的低價"><a href="#同質產品中，一線品牌面對競爭對手的低價" class="headerlink" title="同質產品中，一線品牌面對競爭對手的低價"></a>同質產品中，一線品牌面對競爭對手的低價</h3><p>不以生產更便宜的產品，為降低公司內同質產品的互相競爭，通常會以另一個二線品牌來賣低價產品</p><h3 id="低價成功因素"><a href="#低價成功因素" class="headerlink" title="低價成功因素"></a>低價成功因素</h3><p>一開始就低價、經營有效率、仍有一定且穩定品質、只關注核心需求提供必需品、高成長高營收、採購強、少負債、掌控更多的事情、廣告聚焦價格、清楚定位、成本優勢</p><h3 id="高價成功因素"><a href="#高價成功因素" class="headerlink" title="高價成功因素"></a>高價成功因素</h3><p>優異的價值、客觀的高價值、高且穩定品質、廣告聚焦高價值（買家認知到的高價值才願意付出高價）、避免促銷</p><h3 id="奢侈品成功因素"><a href="#奢侈品成功因素" class="headerlink" title="奢侈品成功因素"></a>奢侈品成功因素</h3><p>所有面向最好的產品性能、品牌形象、有限的產量與市占率、嚴格避免折扣或類似行為（損害產品剩餘價值、品牌）、掌控價值鏈</p><h2 id="價格影響獲利"><a href="#價格影響獲利" class="headerlink" title="價格影響獲利"></a>價格影響獲利</h2><h3 id="營收-價格-銷量，總獲利-營收-成本"><a href="#營收-價格-銷量，總獲利-營收-成本" class="headerlink" title="營收 = 價格 * 銷量，總獲利 = 營收-成本"></a>營收 = 價格 * 銷量，總獲利 = 營收-成本</h3><p>獲利三要素： 價格，銷量，成本</p><h3 id="理論上假想價格與銷量是一條線，價格上升銷量下降，反之亦然"><a href="#理論上假想價格與銷量是一條線，價格上升銷量下降，反之亦然" class="headerlink" title="理論上假想價格與銷量是一條線，價格上升銷量下降，反之亦然"></a>理論上假想價格與銷量是一條線，價格上升銷量下降，反之亦然</h3><p>最適當的價格，即是獲利最大的時候，也就是「價格 * 銷量 - 成本」最大的時候</p><h3 id="降低價格期望銷售提升，要大量的提升才能維持獲利"><a href="#降低價格期望銷售提升，要大量的提升才能維持獲利" class="headerlink" title="降低價格期望銷售提升，要大量的提升才能維持獲利"></a>降低價格期望銷售提升，要大量的提升才能維持獲利</h3><p>例：<br>價格100元 * 銷量100萬 = 營收10,000萬元<br>若變動成本（隨著賣出的產品數量會變動的成本，如原物料，假設為40元）40元 * 100萬 = 變動成本4,000萬元<br>若固定成本（賣出多少個產品也不影響的成本，如店租）= 3,000萬元<br>獲利 = 營收10,000萬元 - 變動成本4,000萬元 - 固定成本3,000萬元 = 3,000萬元</p><p>若價格降20%，100 * 20% = 80元，要維持一樣的獲利，要達到銷量x萬<br>價格80元 * 銷量x萬 = 營收80x萬元<br>變動成本一樣40元 * 銷量x萬 = 變動成本40x萬元<br>固定成本一樣3,000萬元<br>獲利要維持3,000萬元 = 營收80x萬元 - 變動成本40x萬元 - 固定成本3,000萬元<br>40x = 6000, x = 150<br>價格降20%銷量要增加50%，否則就是獲利下降<br>重點要是獲利而不是營收</p><h3 id="折扣提升出來的銷量要把不會買的變成會買，或是已經要買的買家買的更多才開始有意義"><a href="#折扣提升出來的銷量要把不會買的變成會買，或是已經要買的買家買的更多才開始有意義" class="headerlink" title="折扣提升出來的銷量要把不會買的變成會買，或是已經要買的買家買的更多才開始有意義"></a>折扣提升出來的銷量要把不會買的變成會買，或是已經要買的買家買的更多才開始有意義</h3><p>比方說買一送一，萬一本來就有兩個人要買，變成兩個人合購<br>比方說買家未來才打算買的東西，且不是經常性需要一直買的產品，像是汽車，因為折扣而提早買，就只是跟未來借銷量<br>比方說該時段可能本身就不太會有買家，折價且沒有透過宣傳讓更多的人知道</p><h3 id="囚犯理論與價格戰，各賣家的漲價與降價"><a href="#囚犯理論與價格戰，各賣家的漲價與降價" class="headerlink" title="囚犯理論與價格戰，各賣家的漲價與降價"></a>囚犯理論與價格戰，各賣家的漲價與降價</h3><p>如果一方降價，另一方也降價，引發價格戰導致雙方獲利都下降<br>如果一方漲價，另一方不漲價，可能導致銷售下降<br>協商一同漲價通常是違法的<br>漲價與降價，了解對手的反應非常重要，理想的狀況是提前發出公布訊息，表示漲價降價理由，或是表示是否會跟進對手的漲價或降價，嚇阻價格戰</p><h2 id="訂價方式"><a href="#訂價方式" class="headerlink" title="訂價方式"></a>訂價方式</h2><h3 id="不理會產品價值與市場的自我訂價"><a href="#不理會產品價值與市場的自我訂價" class="headerlink" title="不理會產品價值與市場的自我訂價"></a>不理會產品價值與市場的自我訂價</h3><p>訂價 = 單看生產一個產品要多少成本 + 一定比例的獲利空間<br>優點是方式簡單，如果競爭對手也這樣訂價，就會儘量避免價格戰影響獲利<br>缺點是不理會買家認知的價值，有可能訂價太高或太低導致獲利不佳</p><h3 id="損益兩平的銷量"><a href="#損益兩平的銷量" class="headerlink" title="損益兩平的銷量"></a>損益兩平的銷量</h3><p>損益兩平的銷量 = 固定成本 / (價格 - 變動成本)<br>可以算出銷量要到多少才開始賺錢<br>去調整價格看銷量的變化，以及是否價格有可能達到這樣的銷量</p><h3 id="組合訂價"><a href="#組合訂價" class="headerlink" title="組合訂價"></a>組合訂價</h3><p>如果知道不同消費者在不同產品所願意付出的最高價格</p><table><thead><tr><th>消費者</th><th>葡萄酒</th><th>起司</th><th>葡萄酒+起司的組合</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>6</td><td>7</td></tr><tr><td>2</td><td>5</td><td>2</td><td>7</td></tr><tr><td>3</td><td>4</td><td>5</td><td>9</td></tr><tr><td>4</td><td>2.5</td><td>3</td><td>5.5</td></tr><tr><td>5</td><td>1.8</td><td>2.4</td><td>4.2</td></tr></tbody></table><p>假設變動成本為0<br>單看葡萄酒與起司，價格訂為葡萄酒4和起司5，消費者23會買葡萄酒，消費者13會買起司，獲利為4 * 2 + 5 * 2 = 18<br>若只提供組合，價格訂為5.5，消費者1234會買組合，獲利5.5 * 4 = 22<br>即使商品總價較低，但仍獲利較高<br>若提供混合的訂價<br>組合訂價5.5，葡萄酒4，起司2.4，消費者1234會買組合，消費者5會購買起司，總獲利22 + 2.4 = 24.4</p><h3 id="分拆訂價仍可以考慮"><a href="#分拆訂價仍可以考慮" class="headerlink" title="分拆訂價仍可以考慮"></a>分拆訂價仍可以考慮</h3><p>單獨賣一個商品就是一個市場的時候<br>零組件標準化，顧客可以自行搭配<br>例如機票把行李費拆開</p><h3 id="不同數量不同訂價"><a href="#不同數量不同訂價" class="headerlink" title="不同數量不同訂價"></a>不同數量不同訂價</h3><p>買家對產品數量的需求可能是第一個正效用最高，然後數量增加正效用遞減，依照不同數量最大化效用訂出買家仍願意購買的價格<br>比如啤酒對買家產生的正效用，可能會隨著杯數減少、價格也可以愈多杯愈便宜，最大化總效用，最大化獲利，前提是不同買家不能彼此share啤酒就是了</p><h3 id="按使用情況付費，賣服務，需求導向思維"><a href="#按使用情況付費，賣服務，需求導向思維" class="headerlink" title="按使用情況付費，賣服務，需求導向思維"></a>按使用情況付費，賣服務，需求導向思維</h3><p>輪胎的例子，壽命延長了25%但是要在價格上漲25%非常困難<br>卡車改按照使用的里程數收費，輪胎壽命延長了25%自然的就多收了25%的價格，可以鼓勵輪胎的進步，而使用者也只有使用的時候才付費，如果運輸需求低，不使用也就沒有費用</p><h3 id="將免費的服務收費"><a href="#將免費的服務收費" class="headerlink" title="將免費的服務收費"></a>將免費的服務收費</h3><p>例子是免費使用的廁所，解決方案稱Sanifair，德國高速公路休息區原由政府負責，之後改民營Task &amp; Rast接下經營，將廁所翻新並收費0.5歐元，成人付全額才可通過一旋轉門，小孩及殘障人士會有一個代幣可免費進入，付的0.5歐元可得到一購物券，可以在休息區的各個地方使用，將免費來上廁所跟有買東西的人區隔出來，有買東西的人仍然算是可以免費上，之後價格變成了0.7歐元，0.5歐元的購物券</p><h3 id="免費與增值的價格"><a href="#免費與增值的價格" class="headerlink" title="免費與增值的價格"></a>免費與增值的價格</h3><p>如skype、linkedin等，有免費的方案，也有premium的方案<br>透過免費讓買家體驗產品，傳遞產品價值給買家：</p><ol><li>要有吸引力的基本服務，帶來大量的用戶</li><li>免費跟升級有明確區隔</li></ol><p>基本服務就很足夠會沒有人升級，基本服務不夠吸引人會沒有人來用</p><h3 id="顧客導向訂價"><a href="#顧客導向訂價" class="headerlink" title="顧客導向訂價"></a>顧客導向訂價</h3><p>讓顧客自行表示願意購買的最高訂價<br>但可能最後會有一堆不切實際的超低價，只能拿來清庫存<br>但也有可能處理得好，就可以得知價格漲跌與銷量起伏的關係<br>像是APP設定美金多少錢提醒，那銀行就可以知道匯率到多少的時候可能會有多少人買，如果銀行希望你買，甚至可以給個別的價格</p><h3 id="拍賣"><a href="#拍賣" class="headerlink" title="拍賣"></a>拍賣</h3><p>有機會以買家最高的價格賣出，比方說ebay、google的廣告刊登競標</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;個人的全書總結，整本書從不同面相探討訂價與獲利：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;從訂價應以買家認知到的價值出發，訂出符合該價值的價格，但書中並不探討價值怎麼算成價格&lt;/li&gt;
&lt;li&gt;從了解買家可能有的心理效應，賣家可以從中有更多獲利，書中探討多種不同的買家心理因素，蠻有趣的&lt;/li&gt;
&lt;li&gt;從「總獲利 = (價格 * 銷量) - (變動成本+固定成本)」出發來討論訂價如何影響獲利，書中舉出很多例子，簡單的數學運算，蠻有趣&lt;/li&gt;
&lt;li&gt;從理論上價格的調整會和銷量成反比的關係出發，鼓勵賣家找到最適當價格來最大化總獲利而不是營收，但如何知道價格與銷量將會呈什麼樣程度的反比並沒有太多解釋&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;整本書有些地方並沒有探討得太深，對訂價、控管獲利、行銷有興趣的我覺得可以讀。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Reading" scheme="https://thiswayne.github.io/tags/Reading/"/>
    
      <category term="Commerce" scheme="https://thiswayne.github.io/tags/Commerce/"/>
    
      <category term="Pricing" scheme="https://thiswayne.github.io/tags/Pricing/"/>
    
  </entry>
  
  <entry>
    <title>小技巧分享與交流</title>
    <link href="https://thiswayne.github.io/posts/trick-share-and-discuss/"/>
    <id>https://thiswayne.github.io/posts/trick-share-and-discuss/</id>
    <published>2019-08-24T02:28:04.000Z</published>
    <updated>2022-12-04T09:14:49.203Z</updated>
    
    <content type="html"><![CDATA[<p>蒐集我常用的各種小工具與常用功能的快捷鍵，或是好像比較不為人知的一些小技巧，歡迎分享與交流。</p><a id="more"></a><h2 id="Chrome瀏覽器"><a href="#Chrome瀏覽器" class="headerlink" title="Chrome瀏覽器"></a>Chrome瀏覽器</h2><h3 id="1-基本的快捷鍵"><a href="#1-基本的快捷鍵" class="headerlink" title="1. 基本的快捷鍵"></a>1. 基本的快捷鍵</h3><ul><li>關閉分頁： <kbd>ctrl</kbd> + <kbd>w</kbd> 或 <kbd>滑鼠中鍵</kbd>點分頁</li><li>切換分頁： <kbd>ctrl</kbd> + <kbd>tab</kbd>（往右）、<kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>tab</kbd>（往左）</li><li>開新分頁： <kbd>ctrl</kbd> + <kbd>t</kbd></li><li>重新開啟最後關閉的分頁： <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>t</kbd></li><li>開無痕視窗： <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>n</kbd></li><li>用當前分頁網址再開一個新的分頁：<kbd>alt</kbd> + <kbd>d</kbd> 然後 <kbd>alt</kbd> + <kbd>enter</kbd> 或 <kbd>滑鼠中鍵</kbd>點重新整理的icon，基本上只要是網址都可以用<kbd>滑鼠中鍵</kbd>，上一頁、下一頁的icon以及書籤的資料夾（一次開多個書籤）都可以</li></ul><h3 id="2-書籤整理"><a href="#2-書籤整理" class="headerlink" title="2. 書籤整理"></a>2. 書籤整理</h3><p>有些常用到爆炸的網站像是：Google Map、字典等等的網站，在書籤上可以編輯名稱，不輸入名字，就會只留icon可以省書籤列空間，資料夾名稱也可以放emoji裝飾，下圖是我的Chrome書籤列XD<br><img src="my-browser-bookmarks-icons.jpg" alt="我的Chrome書籤列XD"></p><h3 id="3-開發人員工具DevTools-不知道怎麼開的上網查一下XD，我最常開的方法是按F12"><a href="#3-開發人員工具DevTools-不知道怎麼開的上網查一下XD，我最常開的方法是按F12" class="headerlink" title="3. 開發人員工具DevTools(不知道怎麼開的上網查一下XD，我最常開的方法是按F12)"></a>3. 開發人員工具DevTools(不知道怎麼開的上網查一下XD，我最常開的方法是按F12)</h3><ul><li>開Run command裡面有更多的功能可以用，快捷鍵： <kbd>ctrl</kbd> + <kbd>shift</kbd> + <kbd>p</kbd><br><img src="chrome-run-command.jpg" alt="Chrome開Run command"></li><li>在Run command輸入screenshot會搜尋到四種截圖方式：選取部分畫面、全畫面擷取（包含網頁要往下滑才看的到的內容）、一個DOM節點的畫面擷取、當前顯示的畫面擷取<br><img src="chrome-run-command-screenshot.jpg" alt="Chrome開Run command截圖"></li></ul><h3 id="4-Debug"><a href="#4-Debug" class="headerlink" title="4. Debug"></a>4. Debug</h3><ul><li>除了常用的在行數上面點一下會出現中斷點，在行數上面按右鍵可以新增conditional breakpoint、logpoint<br><img src="chrome-debug.jpg" alt="chrome debug"></li><li>有些時候用console.table()印資料來顯示比較方便<br><img src="chrome-console-table.jpg" alt="chrome console table"></li></ul><h3 id="5-Chrome開發相關我平常追蹤的地方"><a href="#5-Chrome開發相關我平常追蹤的地方" class="headerlink" title="5. Chrome開發相關我平常追蹤的地方"></a>5. Chrome開發相關我平常追蹤的地方</h3><p><a href="https://www.youtube.com/user/ChromeDevelopers/" target="_blank" rel="noopener">Google Chrome Developers Youtube Channel</a></p><h3 id="6-外掛"><a href="#6-外掛" class="headerlink" title="6. 外掛"></a>6. 外掛</h3><ul><li><a href="https://chrome.google.com/webstore/detail/streamkeys/ekpipjofdicppbepocohdlgenahaneen" target="_blank" rel="noopener">Streamkeys</a>： 可以設定快捷鍵去操作瀏覽器正在播放的歌（Youtube、Spotify等等），有分成視窗切換到瀏覽器才有效的快捷鍵或是全局不用切換視窗只要有開著瀏覽器就有效的快捷鍵，我需要不用切換畫面就可以直接控制音樂，這樣做事做到一半要換歌或是暫停都不用滑鼠跟切畫面，我習慣用Spotify桌面板，但是桌面板快捷鍵要切換視窗才可以控制音樂，最後方法是用瀏覽器開一個Spotify的分頁，因為Spotify同一帳號不同設備之間都有連動，所以我用Streamkeys控制瀏覽器Spotify分頁的音樂，也會控制到桌面板的Spotify的音樂</li><li><a href="https://chrome.google.com/webstore/detail/marinara-pomodoro%C2%AE-assist/lojgmehidjdhhbmpjfamhpkpodfcodef" target="_blank" rel="noopener">Marinara: Pomodoro® Assistant</a>： 如果你聽過番茄工作法，可以裝這個外掛來輔助，認真想要有效率要專注做事情或是學習的時候我會使用</li></ul><h2 id="Youtube平台"><a href="#Youtube平台" class="headerlink" title="Youtube平台"></a>Youtube平台</h2><h3 id="1-常用快捷鍵"><a href="#1-常用快捷鍵" class="headerlink" title="1. 常用快捷鍵"></a>1. 常用快捷鍵</h3><ul><li>全螢幕： <kbd>f</kbd></li><li>倒帶30秒： <kbd>j</kbd></li><li>快轉30秒： <kbd>l</kbd></li><li>暫停： <kbd>k</kbd></li><li>減速： <kbd>shift</kbd> + <kbd><</kbd></li><li>加速： <kbd>shift</kbd> + <kbd>></kbd></li><li>靜音： <kbd>m</kbd></li><li>字幕： <kbd>shift</kbd> + <kbd>c</kbd></li><li>下一個影片： <kbd>shift</kbd> + <kbd>n</kbd> (next)</li><li>上一個影片： <kbd>shift</kbd> + <kbd>p</kbd> (previous)</li></ul><h3 id="2-自訂影片速度"><a href="#2-自訂影片速度" class="headerlink" title="2. 自訂影片速度"></a>2. 自訂影片速度</h3><p>youtube只提供0.75x跟1x速度，有時候放play-along的歌練習打鼓，但是一開始跟音樂太快的時候可以用這個方法更精細控制速度一點一點的從慢的練習到正常速度： 在瀏覽器DevTools的console裡面輸入</p><figure class="highlight javascript"><figcaption><span>JavaScript</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'video'</span>).playbackRate <span class="comment">// 顯示現在撥放速度</span></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'video'</span>).playbackRate = <span class="number">3</span> <span class="comment">// 調整撥放速度為3倍速</span></span><br></pre></td></tr></table></figure><h2 id="Windows作業系統"><a href="#Windows作業系統" class="headerlink" title="Windows作業系統"></a>Windows作業系統</h2><ul><li><a href="https://docs.microsoft.com/zh-tw/sysinternals/downloads/zoomit" target="_blank" rel="noopener">ZoomIt</a>：微軟官方出的放大螢幕小工具，簡報演講萬一要demo真的有什麼文件無法放大的時候可以用，也可以在螢幕當白板寫字</li><li><a href="https://picpick.app/en/" target="_blank" rel="noopener">PicPick</a>：主要是截圖軟體，可以有多種截圖的方式，也可以在螢幕當白板寫字</li><li>在任一資料夾下，在資料夾路徑輸入cmd可以直接開啟一個command line interface，路徑就是剛才資料夾的路徑，不過權限不是管理員<br><img src="windows-folder-cmd.jpg" alt="在資料夾路徑打cmd直接開cmd"></li></ul><h2 id="Visual-Studio-Code外掛"><a href="#Visual-Studio-Code外掛" class="headerlink" title="Visual Studio Code外掛"></a>Visual Studio Code外掛</h2><ul><li><a href="https://code.visualstudio.com/docs/editor/accessibility" target="_blank" rel="noopener">Zoom放大縮小快捷鍵</a>：<kbd>ctrl</kbd> + <kbd>=</kbd> （放大）、<kbd>ctrl</kbd> + <kbd>-</kbd> （縮小）</li><li><a href="https://code.visualstudio.com/docs/editor/emmet" target="_blank" rel="noopener">Emmet in Visual Studio Code（以前叫Zencoding）</a>：Visual Studio Code已內建，有很多簡便的功能，最基本的像是multi cursor可以按住alt+滑鼠一次多個游標編輯多個地方<br><img src="vs-code-multi-cursor.gif" alt="vs code multi cursor"></li><li><a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer" target="_blank" rel="noopener">Live Server</a>：如果要編輯html可以直接有一個Go Live按鈕幫你開一個local server即時顯示</li><li><a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a>：幫你把誇號、大誇號同一組用同樣的顏色，不然誇號一連串的話看到眼睛快花了<br><img src="vs-code-bracket-pair-colorizer.jpg" alt="vs code bracket pair colorizer"></li><li><a href="https://marketplace.visualstudio.com/items?itemName=yzhang.markdown-all-in-one" target="_blank" rel="noopener">Markdown All in One</a>、<a href="https://marketplace.visualstudio.com/items?itemName=bierner.markdown-preview-github-styles" target="_blank" rel="noopener">Markdown Preview Github</a>、<a href="https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint" target="_blank" rel="noopener">markdownlint</a>：我個人寫markdown有用</li></ul><h2 id="Google-Search關鍵字"><a href="#Google-Search關鍵字" class="headerlink" title="Google Search關鍵字"></a>Google Search關鍵字</h2><p>我最常用的是完全符合關鍵字的「&quot;keyword&quot;」和包含網站「site:xxxx.com」以及排除網站「-site:xxxx.com」</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;蒐集我常用的各種小工具與常用功能的快捷鍵，或是好像比較不為人知的一些小技巧，歡迎分享與交流。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Tricks" scheme="https://thiswayne.github.io/tags/Tricks/"/>
    
      <category term="Chrome Tricks" scheme="https://thiswayne.github.io/tags/Chrome-Tricks/"/>
    
      <category term="Chrome DevTools Tricks" scheme="https://thiswayne.github.io/tags/Chrome-DevTools-Tricks/"/>
    
      <category term="Chrome Plugin" scheme="https://thiswayne.github.io/tags/Chrome-Plugin/"/>
    
      <category term="Visual Studio Plugin" scheme="https://thiswayne.github.io/tags/Visual-Studio-Plugin/"/>
    
      <category term="YouTube Tricks" scheme="https://thiswayne.github.io/tags/YouTube-Tricks/"/>
    
  </entry>
  
  <entry>
    <title>C#的Async &amp; Await筆記</title>
    <link href="https://thiswayne.github.io/posts/csharp-async-await-note/"/>
    <id>https://thiswayne.github.io/posts/csharp-async-await-note/</id>
    <published>2019-08-23T17:51:46.000Z</published>
    <updated>2022-12-04T09:14:49.203Z</updated>
    
    <content type="html"><![CDATA[<p>最一開始學習C#的時候，搞不太清楚<code>async</code>/<code>await</code>實際上到底發生什麼事，有些人認為用<code>await</code>就是新增一個執行緒去執行一個<code>async method</code>，用多執行緒來平行處理的概念，但是又看到一般建議如果有用到<code>async</code>/<code>await</code>，最好就是all the way都用<code>async</code>/<code>await</code>，不要中間又用<code>Task.Result</code>等等不是<code>await</code>的方式，如果真的每寫一個<code>await</code>就是新增一條執行緒去執行，那all the way都是<code>await</code>不就占用超多條執行緒？</p><p>當時沒有辦法有其他方式理解<code>async</code>/<code>await</code>，只能照著建議的使用方式去寫程式，想深入了解<code>async</code>/<code>await</code>但常常看不懂，看文件上寫CPU bound與IO bound的情況，沒有辦法真的理解情況的不同會怎麼影響執行與效能，看到文件上寫碰到<code>await</code>會跳回到呼叫端，等<code>await</code>裡面的東西結束了就會從<code>await</code>下方自動繼續往下執行，腦袋裡的模型暫時只能想像常常都是有一個執行緒被拿去執行<code>await</code>裡面的東西。</p><p>之後念了一些作業系統的概念，再查一次資料，回來重新理解<code>async</code>/<code>await</code>，發現以前腦袋裡那些暫時先那樣想的模型，有些可以說是對的也可以說不完全對，<code>async</code>/<code>await</code>的題目有很多東西可以研究，在這邊來做一點筆記，有錯誤還請指正。</p><a id="more"></a><h2 id="TL-DR，細節懶得看只想先知道怎麼做"><a href="#TL-DR，細節懶得看只想先知道怎麼做" class="headerlink" title="TL;DR，細節懶得看只想先知道怎麼做"></a>TL;DR，細節懶得看只想先知道怎麼做</h2><p>下一篇<a href="../csharp-async-await-note-2/">C#的Async &amp; Await筆記(2)</a>有程式碼可以玩玩看</p><ol><li><p>平行執行<code>Task</code></p><p>多個<code>MethodAsync</code>呼叫可以先持有各method回傳的<code>Task</code>，做其他事情，然後真正需要倚賴<code>Task</code>的結果時再用<code>await</code>依據結果繼續執行。</p></li><li><p>不要用<code>async void</code></p></li><li><p>沒真的需要用<code>await</code>，可以不用<code>return await MethodAsync(...)</code>，直接傳回給呼叫端<code>Task</code></p></li><li><p>寫CPU bound的library API，讓呼叫方自行決定怎麼控制執行緒來執行</p></li><li><p>寫library除非一定需要跟UI thread互動，否則建議使用<code>await</code>時加上<code>ConfigureAwait(false)</code></p></li><li><p>非同步處理是一個目的，多執行緒是一種達成方式，但不是唯一的達成方式。用<code>await</code>執行IO bound的method，IO等待期間沒有執行緒被占用著等待IO，<code>async</code>/<code>await</code>本身也不額外新增執行緒</p></li></ol><h2 id="1-平行執行Task"><a href="#1-平行執行Task" class="headerlink" title="1. 平行執行Task"></a>1. 平行執行<code>Task</code></h2><p>當持有回傳的<code>Task</code>時，實際上<code>Task</code>的內容已經開始執行。<br>可以的話先開始執行耗時的<code>async method</code>，再執行其他不倚賴剛才<code>async method</code>結果的運算，一定需要<code>async method</code>的結果時再用<code>await</code>。</p><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面這一行會建立並開始一個Task</span></span><br><span class="line"><span class="keyword">var</span> myTask = someWebAccessMethodAsync(url);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 當Task執行期間，可以先做其他不依賴Task結果的事情...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 當前method會停止並跳回給呼叫端，await之後的程式會在Task完成以後繼續被執行</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="keyword">await</span> myTask;</span><br></pre></td></tr></table></figure><p>有多個<code>async method</code>先取得各個<code>Task</code>，如此各個<code>async method</code>即開始處理，在需要結果的時候再用<code>await</code>。</p><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Task&lt;<span class="keyword">int</span>&gt; download1 =</span><br><span class="line">    ProcessURLAsync(<span class="string">"https://msdn.microsoft.com"</span>, client);</span><br><span class="line"></span><br><span class="line">Task&lt;<span class="keyword">int</span>&gt; download2 =</span><br><span class="line">    ProcessURLAsync(<span class="string">"https://msdn.microsoft.com/library/hh156528(VS.110).aspx"</span>, client);  </span><br><span class="line"></span><br><span class="line">Task&lt;<span class="keyword">int</span>&gt; download3 =</span><br><span class="line">    ProcessURLAsync(<span class="string">"https://msdn.microsoft.com/library/67w7t67f.aspx"</span>, client);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 需要個別Task的結果再依序用await</span></span><br><span class="line"><span class="keyword">int</span> length1 = <span class="keyword">await</span> download1;  </span><br><span class="line"><span class="keyword">int</span> length2 = <span class="keyword">await</span> download2;  </span><br><span class="line"><span class="keyword">int</span> length3 = <span class="keyword">await</span> download3;</span><br></pre></td></tr></table></figure><p>參考<br><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await" target="_blank" rel="noopener">How to: Make Multiple Web Requests in Parallel by Using async and await (C#)</a></p><h2 id="2-不要用async-void"><a href="#2-不要用async-void" class="headerlink" title="2. 不要用async void"></a>2. 不要用<code>async void</code></h2><p>除非是最上層的event handler需要，否則不要用<code>async void</code>。</p><p>呼叫端沒辦法知道<code>async method</code>什麼時候工作結束，可能導致race condition，下面案例line A和line B被執行到的順序不一定，有可能經過了2秒line B還沒完成，line A就先往下印出<code>m_GetResponse</code>。</p><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Button1_Click</span>(<span class="params"><span class="keyword">object</span> Sender, EventArgs e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SendData(<span class="string">"https://secure.flickr.com/services/oauth/request_token"</span>);</span><br><span class="line">        <span class="keyword">await</span> Task.Delay(<span class="number">2000</span>);<span class="comment">// line A, race condition with line B</span></span><br><span class="line">        DebugPrint(<span class="string">"Received Data: "</span> + m_GetResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        rootPage.NotifyUser(<span class="string">"Error posting data to server."</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">SendData</span>(<span class="params"><span class="keyword">string</span> Url</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> request = WebRequest.Create(Url);</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> response = <span class="keyword">await</span> request.GetResponseAsync()) <span class="comment">// line B, race condition with line A</span></span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> StreamReader(response.GetResponseStream()))</span><br><span class="line">        m_GetResponse = stream.ReadToEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>async void</code>會fire and forget，預期的<code>try</code>/<code>catch</code>會抓不到exception。</p><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Button1_Click</span>(<span class="params"><span class="keyword">object</span> Sender, EventArgs e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SendData(<span class="string">"https://secure.flickr.com/services/oauth/request_token"</span>);</span><br><span class="line">        <span class="comment">//await Task.Delay(2000);</span></span><br><span class="line">        <span class="comment">//DebugPrint("Received Data: " + m_GetResponse);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        <span class="comment">// 有可能抓不到SendData丟出來的exception</span></span><br><span class="line">        <span class="comment">// 因為等SendData裡面的await後續開始執行時</span></span><br><span class="line">        <span class="comment">// main thread可能已經執行完整個Button1_Click</span></span><br><span class="line">        <span class="comment">// 最後exception可能會是更外層才接到然後跳到螢幕上顯示</span></span><br><span class="line">        rootPage.NotifyUser(<span class="string">"Error posting data to server."</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">SendData</span>(<span class="params"><span class="keyword">string</span> Url</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> request = WebRequest.Create(Url);</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> response = <span class="keyword">await</span> request.GetResponseAsync())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> StreamReader(response.GetResponseStream()))</span><br><span class="line">        m_GetResponse = stream.ReadToEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述程式比較好的寫法</p><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> <span class="keyword">void</span> <span class="title">Button1_Click</span>(<span class="params"><span class="keyword">object</span> Sender, EventArgs e</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        m_GetResponse = <span class="keyword">await</span> SendDataAsync(<span class="string">"https://secure.flickr.com/services/oauth/request_token"</span>);</span><br><span class="line"></span><br><span class="line">        DebugPrint(<span class="string">"Received Data: "</span> + m_GetResponse);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">        rootPage.NotifyUser(<span class="string">"Error posting data to server."</span> + ex.Message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">SendDataAsync</span>(<span class="params"><span class="keyword">string</span> Url</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> request = WebRequest.Create(Url);</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> response = <span class="keyword">await</span> request.GetResponseAsync())</span><br><span class="line">    <span class="keyword">using</span> (<span class="keyword">var</span> stream = <span class="keyword">new</span> StreamReader(response.GetResponseStream()))</span><br><span class="line">        <span class="keyword">return</span> stream.ReadToEnd();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>參考<br><a href="https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async/Tip-1-Async-void-is-for-top-level-event-handlers-only" target="_blank" rel="noopener">Tip 1: Async void is for top-level event-handlers only</a></p><h2 id="3-沒真的需要用await，可以不用return-await-MethodAsync-，直接傳回給呼叫端Task"><a href="#3-沒真的需要用await，可以不用return-await-MethodAsync-，直接傳回給呼叫端Task" class="headerlink" title="3. 沒真的需要用await，可以不用return await MethodAsync(...)，直接傳回給呼叫端Task"></a>3. 沒真的需要用<code>await</code>，可以不用<code>return await MethodAsync(...)</code>，直接傳回給呼叫端<code>Task</code></h2><figure class="highlight csharp"><figcaption><span>C#</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多餘的async和await</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">async</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">Method</span>(<span class="params">...</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 中間做一些不用await的事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> IORequestAsync(...);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 不用掛上async，直接回傳Task就可以了</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Task&lt;<span class="keyword">string</span>&gt; <span class="title">Method</span>(<span class="params">...</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> IORequestAsync(...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-寫CPU-bound的library-API，讓呼叫方自行決定怎麼控制執行緒來執行"><a href="#4-寫CPU-bound的library-API，讓呼叫方自行決定怎麼控制執行緒來執行" class="headerlink" title="4. 寫CPU bound的library API，讓呼叫方自行決定怎麼控制執行緒來執行"></a>4. 寫CPU bound的library API，讓呼叫方自行決定怎麼控制執行緒來執行</h2><p>比方說要寫的API需要做大量Deserialize，或是很多需要計算的for迴圈，CPU bound，這時候讓呼叫API的地方自行決定該怎麼控制多少執行緒來執行，不要包起來默默的占用執行緒。</p><p>參考<br><a href="https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async/Tip-2-Distinguish-CPU-Bound-work-from-IO-bound-work" target="_blank" rel="noopener">Tip 2: Distinguish CPU-Bound work from IO-bound work</a></p><h2 id="5-寫library除非需要跟UI-thread互動，否則建議使用await時加上ConfigureAwait-false"><a href="#5-寫library除非需要跟UI-thread互動，否則建議使用await時加上ConfigureAwait-false" class="headerlink" title="5. 寫library除非需要跟UI thread互動，否則建議使用await時加上ConfigureAwait(false)"></a>5. 寫library除非需要跟UI thread互動，否則建議使用<code>await</code>時加上<code>ConfigureAwait(false)</code></h2><p>一般有UI thread的應用程式，因為使用SynchronizationContext機制的原因，所以在<code>await</code>的<code>Task</code>完成之後，機制上會把剩下要執行的部分用<code>SynchroniztionContext.Post</code>的方式（把要做的事情包起來丟到一個queue，UI thread會去把這個queue裡的工作做掉）丟給UI thread去執行，容易導致UI thread執行太多不必要的工作，導致UI thread被佔用畫面卡住，所以建議用<code>await</code>的地方加上<code>ConfigureAwait(false)</code>讓<code>await</code>的<code>Task</code>完成後，不要透過SynchronizationContext的機制執行後續的程式，而透過執行緒池裡的執行緒完成。</p><h2 id="6-非同步是一個目的，多執行緒是一種達成方式，但不是唯一的達成方式。用await執行IO-bound的method，IO等待期間沒有執行緒被占用著等待IO，async-await本身也不額外新增執行緒"><a href="#6-非同步是一個目的，多執行緒是一種達成方式，但不是唯一的達成方式。用await執行IO-bound的method，IO等待期間沒有執行緒被占用著等待IO，async-await本身也不額外新增執行緒" class="headerlink" title="6. 非同步是一個目的，多執行緒是一種達成方式，但不是唯一的達成方式。用await執行IO bound的method，IO等待期間沒有執行緒被占用著等待IO，async/await本身也不額外新增執行緒"></a>6. 非同步是一個目的，多執行緒是一種達成方式，但不是唯一的達成方式。用<code>await</code>執行IO bound的method，IO等待期間沒有執行緒被占用著等待IO，<code>async</code>/<code>await</code>本身也不額外新增執行緒</h2><p>先知道兩點：</p><ol><li><p>一般硬體／作業系統有機制可以不用只靠執行緒一直問IO是否完成了來知道IO狀態，而是當IO完成了來通知process該IO已經完成了。</p></li><li><p>thread pool裡面有<code>worker thread</code>、<code>IOCP thread</code>兩種。</p></li></ol><p>從上層一點來說，當呼叫了一個IO操作，會取得一個<code>Task</code>，此時IO已經開始執行，當執行到<code>await task</code>，如果<code>Task</code>還沒完成，當前執行緒會跳回到caller端，如果<code>Task</code>已經完成，則會直接繼續執行。</p><p><code>await</code>後續還未完成的部分，會在實際IO結束完成後，透過IOCP(Input Output Completion Port)的機制，由<code>IOCP thread</code>來接手，如果是有SynchronizationContext(通常有UI的像是WinForm, WPF都有)，會以<code>SynchroniztionContext.Post</code>的方式丟給UI thread去執行<code>await</code>後續的程式，如果有加上<code>ConfigureAwait(false)</code>則由當前<code>IOCP thread</code>繼續執行。</p><p>compiler在compile的時候看到<code>await</code>實際上有做一些手腳，程式執行到<code>await</code>這邊會先去看<code>Task</code>是不是已經完成了（fast path優化），如果已經完成了則沒必要透過額外的<code>await</code>機制增加負擔，而是直接繼續執行就可以了，所以程式碼上<code>await</code>後續執行的thread也是有可能是原先的thread，還有些情況像是做測試就可以用<code>Task.FromResult</code>直接給一個完成了的<code>Task</code>可以省去額外的<code>await</code>負擔。</p><p>非同步是一個目的，多執行緒是一種達成方式，但不是唯一的達成方式。過程中主執行緒在IO等待期間沒有閒置也一直繼續執行不倚賴IO結果的程式，而當IO完成了，<code>await</code>後續的程式是由thread pool裡面的<code>IOCP thread</code>來接手，沒有執行緒空等，過程中沒有額外的新增執行緒，全靠原本thread pool的機制在管理執行緒數量。不依賴IO結果的程式與等待IO兩件工作非同步的在進行。</p><p>參考<br><a href="https://vimeo.com/43808831" target="_blank" rel="noopener">Lucian Wischik - Async Part 1 — new feature in Visual Studio 11 for responsive programming.</a><br><a href="https://blog.stephencleary.com/2013/11/there-is-no-thread.html" target="_blank" rel="noopener">There Is No Thread</a></p><h2 id="小記IOCP"><a href="#小記IOCP" class="headerlink" title="小記IOCP"></a>小記IOCP</h2><p>一個專門用來處理同時有多個IO的Asynchronous I/O機制，裡面主要有一個<code>I/O Completion Queue</code>以FIFO存放完成了的IO工作相關資訊（包含IO本身資訊，以及要繼續執行的程式），有一個<code>WaitingThread List</code>以LIFO存放執行緒（一個執行緒執行完一個工作要再執行下一個工作，LIFO有機會因省去context switch而速度加快）。</p><p>應用端呼叫IO時附上操作IO的資訊以及IO完成後要怎麼處理的資訊，當IO完成後這些資訊就會被放到<code>I/O Completion Queue</code>，然後會有一定數量的<code>IOCP thread</code>去處理這些完成了的IO工作。以往常常是一個thread來處理一個IO，有很多個IO request就要很多個thread，而現在是多個thread去檢查一個存放完成了IO的queue，如果沒有要處理的IO在<code>I/O Completion Queue</code>裡面，thread就會被block住放進<code>WaitingThread List</code>，等<code>I/O Completion Queue</code>又有IO完成了的資訊，再以LIFO的方式從<code>WaitingThread List</code>取出thread喚醒來工作。</p><p>參考<br><a href="https://en.wikipedia.org/wiki/Asynchronous_I/O" target="_blank" rel="noopener">Asynchronous I/O</a><br><a href="https://zh.wikipedia.org/wiki/IOCP" target="_blank" rel="noopener">IOCP</a><br><a href="https://blog.51cto.com/cnn237111/1437475" target="_blank" rel="noopener">工作者线程（worker thread）和I/O线程</a><br><a href="https://docs.microsoft.com/zh-tw/windows/win32/fileio/i-o-completion-ports" target="_blank" rel="noopener">I/O Completion Ports</a></p><h2 id="全部參考"><a href="#全部參考" class="headerlink" title="全部參考"></a>全部參考</h2><p>C# async &amp; await，我覺得這些資料都解釋的很好很值得一讀：</p><ol><li><a href="https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/concepts/async/how-to-make-multiple-web-requests-in-parallel-by-using-async-and-await" target="_blank" rel="noopener">How to: Make Multiple Web Requests in Parallel by Using async and await (C#)</a></li><li><a href="https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async" target="_blank" rel="noopener">Six Essential Tips for Async</a></li><li><a href="https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async/Tip-1-Async-void-is-for-top-level-event-handlers-only" target="_blank" rel="noopener">Tip 1: Async void is for top-level event-handlers only</a></li><li><a href="https://channel9.msdn.com/Series/Three-Essential-Tips-for-Async/Tip-2-Distinguish-CPU-Bound-work-from-IO-bound-work" target="_blank" rel="noopener">Tip 2: Distinguish CPU-Bound work from IO-bound work</a></li><li><a href="https://vimeo.com/43808831" target="_blank" rel="noopener">Lucian Wischik - Async Part 1 — new feature in Visual Studio 11 for responsive programming.</a></li><li><a href="https://vimeo.com/43808833" target="_blank" rel="noopener">Lucian Wischik - Async Part 2 — deep dive into the new language feature of VB/C#</a></li><li><a href="https://dotblogs.com.tw/code6421/2017/01/24/csharp5" target="_blank" rel="noopener">談C# 編譯器編譯前的程式碼擴展行為 (2017年續　上)</a></li></ol><p>IOCP相關：</p><ol><li><a href="https://en.wikipedia.org/wiki/Asynchronous_I/O" target="_blank" rel="noopener">Asynchronous I/O</a></li><li><a href="https://zh.wikipedia.org/wiki/IOCP" target="_blank" rel="noopener">IOCP</a></li><li><a href="https://blog.51cto.com/cnn237111/1437475" target="_blank" rel="noopener">工作者线程（worker thread）和I/O线程</a></li><li><a href="https://docs.microsoft.com/zh-tw/windows/win32/fileio/i-o-completion-ports" target="_blank" rel="noopener">I/O Completion Ports</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最一開始學習C#的時候，搞不太清楚&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;實際上到底發生什麼事，有些人認為用&lt;code&gt;await&lt;/code&gt;就是新增一個執行緒去執行一個&lt;code&gt;async method&lt;/code&gt;，用多執行緒來平行處理的概念，但是又看到一般建議如果有用到&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;，最好就是all the way都用&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;，不要中間又用&lt;code&gt;Task.Result&lt;/code&gt;等等不是&lt;code&gt;await&lt;/code&gt;的方式，如果真的每寫一個&lt;code&gt;await&lt;/code&gt;就是新增一條執行緒去執行，那all the way都是&lt;code&gt;await&lt;/code&gt;不就占用超多條執行緒？&lt;/p&gt;
&lt;p&gt;當時沒有辦法有其他方式理解&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;，只能照著建議的使用方式去寫程式，想深入了解&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;但常常看不懂，看文件上寫CPU bound與IO bound的情況，沒有辦法真的理解情況的不同會怎麼影響執行與效能，看到文件上寫碰到&lt;code&gt;await&lt;/code&gt;會跳回到呼叫端，等&lt;code&gt;await&lt;/code&gt;裡面的東西結束了就會從&lt;code&gt;await&lt;/code&gt;下方自動繼續往下執行，腦袋裡的模型暫時只能想像常常都是有一個執行緒被拿去執行&lt;code&gt;await&lt;/code&gt;裡面的東西。&lt;/p&gt;
&lt;p&gt;之後念了一些作業系統的概念，再查一次資料，回來重新理解&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;，發現以前腦袋裡那些暫時先那樣想的模型，有些可以說是對的也可以說不完全對，&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt;的題目有很多東西可以研究，在這邊來做一點筆記，有錯誤還請指正。&lt;/p&gt;
    
    </summary>
    
    
      <category term="C#" scheme="https://thiswayne.github.io/tags/C/"/>
    
      <category term="async&amp;await" scheme="https://thiswayne.github.io/tags/async-await/"/>
    
  </entry>
  
  <entry>
    <title>Conceptual Problems/Solutions on Leetcode</title>
    <link href="https://thiswayne.github.io/posts/conceptual-problems-solutions-on-leetcode/"/>
    <id>https://thiswayne.github.io/posts/conceptual-problems-solutions-on-leetcode/</id>
    <published>2019-08-23T15:01:26.000Z</published>
    <updated>2022-12-04T09:14:49.203Z</updated>
    
    <content type="html"><![CDATA[<p>This article is for helping someone who wants to practice algorithms on leetcode, and already has some basic data structure knowledge like hash table, stack, queue, etc.</p><p>After solving some problems, I think some conceptual problems/solutions that once are understood, other problems are just the same. And without knowing these solutions, some problems are just not so easy to come up with a good solution.</p><a id="more"></a><h2 id="Frequently-Used-Coding-Tips-General-Templates-amp-Ideas"><a href="#Frequently-Used-Coding-Tips-General-Templates-amp-Ideas" class="headerlink" title="Frequently Used Coding Tips, General Templates &amp; Ideas"></a>Frequently Used Coding Tips, General Templates &amp; Ideas</h2><h3 id="1-getting-a-bigger-smaller-number"><a href="#1-getting-a-bigger-smaller-number" class="headerlink" title="1. getting a bigger/smaller number"></a>1. getting a bigger/smaller number</h3><p>instead of using if/else:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line">Math.Max(a, b)</span><br><span class="line">Math.Min(a, b)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line">max(a, b)</span><br><span class="line">min(a, b)</span><br></pre></td></tr></table></figure><h3 id="2-check-if-two-variables-are-null"><a href="#2-check-if-two-variables-are-null" class="headerlink" title="2. check if two variables are null"></a>2. check if two variables are null</h3><p>If a or b is null, return false.<br>If both of them are null, return true.<br>Otherwise continue.<br>This snippet of code is so concise and beautiful, it gets rid of so much if/else.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">if</span>(a == <span class="literal">null</span> || b == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a == b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">    <span class="keyword">return</span> a == b</span><br></pre></td></tr></table></figure><h3 id="3-BFS-Breath-First-Search-template"><a href="#3-BFS-Breath-First-Search-template" class="headerlink" title="3. BFS(Breath First Search) template"></a>3. BFS(Breath First Search) template</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line">Queue&lt;<span class="keyword">int</span>&gt; queue = <span class="keyword">new</span> Queue&lt;<span class="keyword">int</span>&gt;(); <span class="comment">// choose Stack or Queue base on the problem</span></span><br><span class="line"><span class="keyword">while</span>(queue.Count != <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">int</span> levelSize = queue.Count;</span><br><span class="line">  <span class="keyword">while</span>(levelSize-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="comment">// do something like enqueue, dequeue...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="comment"># choose Stack or Queue base on the problem</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line">queue = deque()</span><br><span class="line"><span class="keyword">while</span> len(queue) != <span class="number">0</span>:</span><br><span class="line">    level_size = len(queue)</span><br><span class="line">    <span class="keyword">while</span> level_size &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># queue.append(x), queue.popleft()</span></span><br><span class="line">        level_size -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">stack = []</span><br><span class="line"><span class="keyword">while</span> len(stack) != <span class="number">0</span>:</span><br><span class="line">    level_size = len(stack)</span><br><span class="line">    <span class="keyword">while</span> level_size &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="comment"># stack.pop(), stack.append(x)</span></span><br><span class="line">        level_size -= <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="4-binary-tree-solution-template"><a href="#4-binary-tree-solution-template" class="headerlink" title="4. binary tree solution template"></a>4. binary tree solution template</h3><p>When visiting a node, usually there are three things we can do, base on the problem to design the order of steps.</p><ol><li>visit a node, do something(like adding the node&#39;s value into the result collection)</li><li>visit the left child node</li><li>visit the right child node</li></ol><h3 id="5-iterate-an-array-over-and-over-again"><a href="#5-iterate-an-array-over-and-over-again" class="headerlink" title="5. iterate an array over and over again"></a>5. iterate an array over and over again</h3><p>Iterate each item in an array from start to end again and again without worrying the index out of bound problem at the end of the array.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line">index = (index + <span class="number">1</span>) % length;</span><br><span class="line">index = (index + length - <span class="number">1</span>) % length; <span class="comment">// iterate from end to start</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line">length = len(arr)</span><br><span class="line">index = (index + <span class="number">1</span>) % length</span><br><span class="line">index = (index + length - <span class="number">1</span>) % length; <span class="comment"># iterate from end to start</span></span><br></pre></td></tr></table></figure><h3 id="6-sorted-data"><a href="#6-sorted-data" class="headerlink" title="6. sorted data"></a>6. sorted data</h3><p>Searching for something and the data is sorted or some math problem which is from 1 to N. Binary Search!</p><h3 id="7-int-overflow-in-binary-search"><a href="#7-int-overflow-in-binary-search" class="headerlink" title="7. int overflow in binary search"></a>7. int overflow in binary search</h3><p>Avoid integer overflow when adding two large integer in binary search</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// don't do this when left + right will overflow</span></span><br><span class="line">mid = (left + right) / <span class="number">2</span></span><br><span class="line"><span class="comment">// do this</span></span><br><span class="line">mid = left + (right - left) / <span class="number">2</span></span><br><span class="line"><span class="comment">// proof:</span></span><br><span class="line"><span class="comment">// mid = (left + right) / 2 = left / 2 +  right / 2 = left - left / 2 + right / 2 = left + (right - left) / 2</span></span><br></pre></td></tr></table></figure><h3 id="8-recusive-solution-might-not-be-space-complexity-O-1"><a href="#8-recusive-solution-might-not-be-space-complexity-O-1" class="headerlink" title="8. recusive solution might not be space complexity O(1)"></a>8. recusive solution might not be space complexity O(1)</h3><p>In the Discuss page of the problem, some solution&#39;s code might looks concise by using recursion, but keep in mind that the stack takes memory space still, so usually the space complexity is not O(1).</p><h2 id="Bit-Manupliation"><a href="#Bit-Manupliation" class="headerlink" title="Bit Manupliation"></a>Bit Manupliation</h2><h3 id="191-Number-of-1-Bits"><a href="#191-Number-of-1-Bits" class="headerlink" title="191. Number of 1 Bits"></a><a href="https://leetcode.com/problems/number-of-1-bits/" target="_blank" rel="noopener">191. Number of 1 Bits</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// The basic solution is to iterate over bits by bit shifting (n &gt;&gt; 1) then check if rightmost bit is one (n &amp; 1).</span></span><br><span class="line"><span class="comment">// The trick here is that n &amp; (n - 1) can eliminate the rightmost 1 in the n's binary bits, so it doesn't have to iterate all bits of n.</span></span><br><span class="line"><span class="comment">// Now the time complexity is depends on how many of 1 in n, not how many bits of n.</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">HammingWeight</span>(<span class="params"><span class="keyword">uint</span> n</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">0</span>) &#123;</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>);</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hammingWeight</span><span class="params">(self, n: int)</span> -&gt; int:</span></span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">while</span> n != <span class="number">0</span>:</span><br><span class="line">            n = n &amp; (n - <span class="number">1</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> count</span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="448-Find-All-Numbers-Disappeared-in-an-Array"><a href="#448-Find-All-Numbers-Disappeared-in-an-Array" class="headerlink" title="448. Find All Numbers Disappeared in an Array"></a><a href="https://leetcode.com/problems/find-all-numbers-disappeared-in-an-array/" target="_blank" rel="noopener">448. Find All Numbers Disappeared in an Array</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// If modifying the iput array is allowed, we can use some trick to manipulate the array to solve some problem without extra space.</span></span><br><span class="line"><span class="comment">// Like using positive/negative in the array to mark visited</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IList&lt;<span class="keyword">int</span>&gt; <span class="title">FindDisappearedNumbers</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> index = Math.Abs(nums[i]) - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[index] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                nums[index] = -nums[index];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        IList&lt;<span class="keyword">int</span>&gt; result = <span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                result.Add(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findDisappearedNumbers</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            index = abs(nums[i]) - <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> nums[index] &gt; <span class="number">0</span>:</span><br><span class="line">                nums[index] = -nums[index]</span><br><span class="line"></span><br><span class="line">        result = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(nums)):</span><br><span class="line">            <span class="keyword">if</span> nums[i] &gt; <span class="number">0</span>:</span><br><span class="line">                result.append(i + <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h2 id="Key-Value"><a href="#Key-Value" class="headerlink" title="Key/Value"></a>Key/Value</h2><h3 id="1-Two-Sum"><a href="#1-Two-Sum" class="headerlink" title="1. Two Sum"></a><a href="https://leetcode.com/problems/two-sum/" target="_blank" rel="noopener">1. Two Sum</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// using key as distance to target, finding if there is a num equals to the distance to target</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>[] <span class="title">TwoSum</span>(<span class="params"><span class="keyword">int</span>[] nums, <span class="keyword">int</span> target</span>)</span> &#123;</span><br><span class="line">        Dictionary&lt;<span class="keyword">int</span> , <span class="keyword">int</span>&gt; dict = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dict.ContainsKey(nums[i])) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;dict[nums[i]], i&#125;;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dict[target - nums[i]] = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">twoSum</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; List[int]:</span></span><br><span class="line">        dict = &#123;&#125;</span><br><span class="line">        <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            <span class="keyword">if</span> num <span class="keyword">in</span> dict:</span><br><span class="line">                <span class="keyword">return</span> [dict[num], i]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dict[target - num] = i</span><br><span class="line">        <span class="keyword">return</span> []</span><br></pre></td></tr></table></figure><h2 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h2><h3 id="704-Binary-Search"><a href="#704-Binary-Search" class="headerlink" title="704. Binary Search"></a><a href="https://leetcode.com/problems/binary-search/" target="_blank" rel="noopener">704. Binary Search</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">Search</span>(<span class="params"><span class="keyword">int</span>[] nums, <span class="keyword">int</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.Length;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt;= right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid] &lt; target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">            <span class="keyword">else</span> right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">search</span><span class="params">(self, nums: List[int], target: int)</span> -&gt; int:</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(nums) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> left &lt;= right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            num = nums[mid]</span><br><span class="line">            <span class="keyword">if</span> num == target: <span class="keyword">return</span> mid</span><br><span class="line">            <span class="keyword">elif</span> num &gt; target: right = mid - <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: left = mid + <span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br></pre></td></tr></table></figure><h3 id="744-Find-Smallest-Letter-Greater-Than-Target"><a href="#744-Find-Smallest-Letter-Greater-Than-Target" class="headerlink" title="744. Find Smallest Letter Greater Than Target"></a><a href="https://leetcode.com/problems/find-smallest-letter-greater-than-target/" target="_blank" rel="noopener">744. Find Smallest Letter Greater Than Target</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">NextGreatestLetter</span>(<span class="params"><span class="keyword">char</span>[] letters, <span class="keyword">char</span> target</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> n = letters.Length;</span><br><span class="line">        <span class="keyword">if</span>(target &gt;= letters[n - <span class="number">1</span>]) <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = left + (right - left) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(letters[mid] &lt;= target) left = mid + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> right = mid;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> letters[right];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreatestLetter</span><span class="params">(self, letters: List[str], target: str)</span> -&gt; str:</span></span><br><span class="line">        left, right = <span class="number">0</span>, len(letters) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> target &gt;= letters[right]: <span class="keyword">return</span> letters[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> left &lt; right:</span><br><span class="line">            mid = left + (right - left) // <span class="number">2</span></span><br><span class="line">            <span class="keyword">if</span> letters[mid] &lt;= target: left = mid + <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>: right = mid</span><br><span class="line">        <span class="keyword">return</span> letters[right]</span><br></pre></td></tr></table></figure><h2 id="Breath-First-Search"><a href="#Breath-First-Search" class="headerlink" title="Breath First Search"></a>Breath First Search</h2><h3 id="111-Minimum-Depth-of-Binary-Tree"><a href="#111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="111. Minimum Depth of Binary Tree"></a><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/" target="_blank" rel="noopener">111. Minimum Depth of Binary Tree</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">MinDepth</span>(<span class="params">TreeNode root</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> currDepth = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; nodes = <span class="keyword">new</span> Queue&lt;TreeNode&gt;();</span><br><span class="line">        nodes.Enqueue(root);</span><br><span class="line">        <span class="keyword">while</span>(nodes.Count != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> levelSize = nodes.Count;</span><br><span class="line">            currDepth++;</span><br><span class="line">            <span class="keyword">while</span>(levelSize-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                TreeNode node = nodes.Dequeue();</span><br><span class="line">                <span class="keyword">if</span>(node.left == <span class="literal">null</span> &amp;&amp; node.right == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> currDepth;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(node.left != <span class="literal">null</span>) nodes.Enqueue(node.left);</span><br><span class="line">                <span class="keyword">if</span>(node.right != <span class="literal">null</span>) nodes.Enqueue(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currDepth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"># class TreeNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, left=None, right=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.left = left</span></span><br><span class="line"><span class="comment">#         self.right = right</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> deque</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">minDepth</span><span class="params">(self, root: Optional[TreeNode])</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">if</span> root <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        curr_depth = <span class="number">0</span></span><br><span class="line">        nodes = deque()</span><br><span class="line">        nodes.append(root)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> len(nodes) != <span class="number">0</span>:</span><br><span class="line">            level_size = len(nodes)</span><br><span class="line">            curr_depth += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(level_size):</span><br><span class="line">                node = nodes.popleft()</span><br><span class="line">                <span class="keyword">if</span> node:</span><br><span class="line">                    <span class="keyword">if</span> node.left <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">and</span> node.right <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                        <span class="keyword">return</span> curr_depth</span><br><span class="line">                    nodes.append(node.left)</span><br><span class="line">                    nodes.append(node.right)</span><br><span class="line">        <span class="keyword">return</span> curr_depth</span><br></pre></td></tr></table></figure><h2 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h2><h3 id="83-Remove-Duplicates-from-Sorted-List"><a href="#83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="83. Remove Duplicates from Sorted List"></a><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/" target="_blank" rel="noopener">83. Remove Duplicates from Sorted List</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">DeleteDuplicates</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line"></span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curr.val == curr.next.val) &#123;</span><br><span class="line">                curr.next = curr.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">deleteDuplicates</span><span class="params">(self, head: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span>: <span class="keyword">return</span> head</span><br><span class="line"></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr.next:</span><br><span class="line">            <span class="keyword">if</span> curr.val == curr.next.val:</span><br><span class="line">                curr.next = curr.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> head</span><br></pre></td></tr></table></figure><h3 id="141-Linked-List-Cycle"><a href="#141-Linked-List-Cycle" class="headerlink" title="141. Linked List Cycle"></a><a href="https://leetcode.com/problems/linked-list-cycle/" target="_blank" rel="noopener">141. Linked List Cycle</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// Floyd's Tortoise and Hare</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">HasCycle</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head.next;</span><br><span class="line">        <span class="keyword">while</span>(slow != fast) &#123;</span><br><span class="line">            <span class="keyword">if</span>(fast == <span class="literal">null</span> || fast.next == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hasCycle</span><span class="params">(self, head: Optional[ListNode])</span> -&gt; bool:</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head.next</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> slow != fast:</span><br><span class="line">            <span class="keyword">if</span> fast <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> fast.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="142-Linked-List-Cycle-II"><a href="#142-Linked-List-Cycle-II" class="headerlink" title="142. Linked List Cycle II"></a><a href="https://leetcode.com/problems/linked-list-cycle-ii/" target="_blank" rel="noopener">142. Linked List Cycle II</a></h3><p>Using Floyd&#39;s cycle detection algoritm to solve this problem only takes O(1) space complexity.<br><a href="https://www.youtube.com/watch?v=LUm2ABqAs1w" target="_blank" rel="noopener">Why Floyd&#39;s cycle detection algorithm works? Detecting loop in a linked list.</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">DetectCycle</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        ListNode slow = head;</span><br><span class="line">        ListNode fast = head;</span><br><span class="line">        <span class="keyword">while</span>(fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            slow = slow.next;</span><br><span class="line">            fast = fast.next.next;</span><br><span class="line">            <span class="keyword">if</span>(slow == fast) &#123;</span><br><span class="line">                fast = head;</span><br><span class="line">                <span class="keyword">while</span>(slow != fast) &#123;</span><br><span class="line">                    slow = slow.next;</span><br><span class="line">                    fast = fast.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> fast;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, x):</span></span><br><span class="line"><span class="comment">#         self.val = x</span></span><br><span class="line"><span class="comment">#         self.next = None</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detectCycle</span><span class="params">(self, head: ListNode)</span> -&gt; ListNode:</span></span><br><span class="line">        <span class="keyword">if</span> head <span class="keyword">is</span> <span class="literal">None</span> <span class="keyword">or</span> head.next <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        slow = head</span><br><span class="line">        fast = head</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> fast <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> fast.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            slow = slow.next</span><br><span class="line">            fast = fast.next.next</span><br><span class="line">            <span class="keyword">if</span> slow == fast:</span><br><span class="line">                fast = head</span><br><span class="line">                <span class="keyword">while</span> slow != fast:</span><br><span class="line">                    slow = slow.next</span><br><span class="line">                    fast = fast.next</span><br><span class="line">                <span class="keyword">return</span> fast</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br></pre></td></tr></table></figure><h3 id="203-Remove-Linked-List-Elements"><a href="#203-Remove-Linked-List-Elements" class="headerlink" title="203. Remove Linked List Elements"></a><a href="https://leetcode.com/problems/remove-linked-list-elements/" target="_blank" rel="noopener">203. Remove Linked List Elements</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// using a dummy head to eliminate those null edge cases</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">RemoveElements</span>(<span class="params">ListNode head, <span class="keyword">int</span> val</span>)</span> &#123;</span><br><span class="line">        ListNode dummy = <span class="keyword">new</span> ListNode(<span class="number">0</span>);</span><br><span class="line">        dummy.next = head;</span><br><span class="line">        ListNode curr = dummy;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="literal">null</span> &amp;&amp; curr.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(curr.next.val == val) &#123;</span><br><span class="line">                curr.next = curr.next.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                curr = curr.next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeElements</span><span class="params">(self, head: Optional[ListNode], val: int)</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">        dummy_head = ListNode(<span class="number">0</span>)</span><br><span class="line">        dummy_head.next = head</span><br><span class="line"></span><br><span class="line">        curr = dummy_head</span><br><span class="line">        <span class="keyword">while</span> curr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> curr.next <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">if</span> curr.next.val == val:</span><br><span class="line">                curr.next = curr.next.next</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                curr = curr.next</span><br><span class="line">        <span class="keyword">return</span> dummy_head.next</span><br></pre></td></tr></table></figure><h3 id="206-Reverse-Linked-List"><a href="#206-Reverse-Linked-List" class="headerlink" title="206. Reverse Linked List"></a><a href="https://leetcode.com/problems/reverse-linked-list/" target="_blank" rel="noopener">206. Reverse Linked List</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">ReverseList</span>(<span class="params">ListNode head</span>)</span> &#123;</span><br><span class="line">        ListNode prev = <span class="literal">null</span>;</span><br><span class="line">        ListNode curr = head;</span><br><span class="line">        <span class="keyword">while</span>(curr != <span class="literal">null</span>) &#123;</span><br><span class="line">            ListNode temp = curr.next;</span><br><span class="line">            curr.next = prev;</span><br><span class="line">            prev = curr;</span><br><span class="line">            curr = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"># class ListNode:</span></span><br><span class="line"><span class="comment">#     def __init__(self, val=0, next=None):</span></span><br><span class="line"><span class="comment">#         self.val = val</span></span><br><span class="line"><span class="comment">#         self.next = next</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverseList</span><span class="params">(self, head: Optional[ListNode])</span> -&gt; Optional[ListNode]:</span></span><br><span class="line">        prev = <span class="literal">None</span></span><br><span class="line">        curr = head</span><br><span class="line">        <span class="keyword">while</span> curr <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            temp = curr.next</span><br><span class="line">            curr.next = prev</span><br><span class="line">            prev = curr</span><br><span class="line">            curr = temp</span><br><span class="line">        <span class="keyword">return</span> prev</span><br></pre></td></tr></table></figure><h2 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h2><p><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/discuss/92007/Sliding-Window-algorithm-template-to-solve-all-the-Leetcode-substring-search-problem." target="_blank" rel="noopener">Sliding Window algorithm template to solve all the Leetcode substring search problem.</a></p><h3 id="438-Find-All-Anagrams-in-a-String"><a href="#438-Find-All-Anagrams-in-a-String" class="headerlink" title="438. Find All Anagrams in a String"></a><a href="https://leetcode.com/problems/find-all-anagrams-in-a-string/" target="_blank" rel="noopener">438. Find All Anagrams in a String</a></h3><h3 id="567-Permutation-in-String"><a href="#567-Permutation-in-String" class="headerlink" title="567. Permutation in String"></a><a href="https://leetcode.com/problems/permutation-in-string/" target="_blank" rel="noopener">567. Permutation in String</a></h3><h2 id="Prefix-Sum"><a href="#Prefix-Sum" class="headerlink" title="Prefix Sum"></a>Prefix Sum</h2><h3 id="560-Subarray-Sum-Equals-K"><a href="#560-Subarray-Sum-Equals-K" class="headerlink" title="560. Subarray Sum Equals K"></a><a href="https://leetcode.com/problems/subarray-sum-equals-k/" target="_blank" rel="noopener">560. Subarray Sum Equals K</a></h3><h3 id="437-Path-Sum-III"><a href="#437-Path-Sum-III" class="headerlink" title="437. Path Sum III"></a><a href="https://leetcode.com/problems/path-sum-iii/" target="_blank" rel="noopener">437. Path Sum III</a></h3><h2 id="Permutation-Backtracking"><a href="#Permutation-Backtracking" class="headerlink" title="Permutation, Backtracking"></a>Permutation, Backtracking</h2><h3 id="backtracking-solution-template"><a href="#backtracking-solution-template" class="headerlink" title="backtracking solution template"></a><a href="https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)" target="_blank" rel="noopener">backtracking solution template</a></h3><h3 id="46-Permutations"><a href="#46-Permutations" class="headerlink" title="46. Permutations"></a><a href="https://leetcode.com/problems/permutations/" target="_blank" rel="noopener">46. Permutations</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> IList&lt;IList&lt;<span class="keyword">int</span>&gt;&gt; Permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        IList&lt;IList&lt;<span class="keyword">int</span>&gt;&gt; result = <span class="keyword">new</span> List&lt;IList&lt;<span class="keyword">int</span>&gt;&gt;();</span><br><span class="line">        <span class="comment">// for some problems, it might be good to sort first</span></span><br><span class="line">        backtracking(nums, <span class="number">0</span>, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">backtracking</span>(<span class="params"><span class="keyword">int</span>[] nums, <span class="keyword">int</span> startIndex, IList&lt;IList&lt;<span class="keyword">int</span>&gt;&gt; result</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(startIndex == nums.Length - <span class="number">1</span>) &#123;</span><br><span class="line">            result.Add(<span class="keyword">new</span> List&lt;<span class="keyword">int</span>&gt;(nums));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = startIndex; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            <span class="comment">// some method to mark the current index is visited</span></span><br><span class="line">            swap(nums, startIndex, i);</span><br><span class="line">            backtracking(nums, startIndex + <span class="number">1</span>, result);</span><br><span class="line">            <span class="comment">// some method to erase the current index is visited</span></span><br><span class="line">            swap(nums, startIndex, i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">swap</span>(<span class="params"><span class="keyword">int</span>[] nums, <span class="keyword">int</span> indexA, <span class="keyword">int</span> indexB</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> temp = nums[indexA];</span><br><span class="line">        nums[indexA] = nums[indexB];</span><br><span class="line">        nums[indexB] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">permute</span><span class="params">(self, nums: List[int])</span> -&gt; List[List[int]]:</span></span><br><span class="line">        result = []</span><br><span class="line">        self.backtracking(nums, <span class="number">0</span>, result)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">backtracking</span><span class="params">(self, nums: List[int], start_index: int, result: List[List[int]])</span>:</span></span><br><span class="line">        <span class="keyword">if</span> start_index == len(nums):</span><br><span class="line">            result.append(list(nums))</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(start_index, len(nums)):</span><br><span class="line">            self.swap(nums, start_index, i)</span><br><span class="line">            self.backtracking(nums, start_index + <span class="number">1</span>, result)</span><br><span class="line">            self.swap(nums, start_index, i)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">swap</span><span class="params">(self, nums: List[int], index_a: int, index_b: int)</span>:</span></span><br><span class="line">        temp = nums[index_a]</span><br><span class="line">        nums[index_a] = nums[index_b]</span><br><span class="line">        nums[index_b] = temp</span><br></pre></td></tr></table></figure><h3 id="1079-Letter-Tile-Possibilities"><a href="#1079-Letter-Tile-Possibilities" class="headerlink" title="1079. Letter Tile Possibilities"></a><a href="https://leetcode.com/problems/letter-tile-possibilities/" target="_blank" rel="noopener">1079. Letter Tile Possibilities</a></h3><h3 id="784-Letter-Case-Permutation"><a href="#784-Letter-Case-Permutation" class="headerlink" title="784. Letter Case Permutation"></a><a href="https://leetcode.com/problems/letter-case-permutation/" target="_blank" rel="noopener">784. Letter Case Permutation</a></h3><h2 id="Dynamic-Programming"><a href="#Dynamic-Programming" class="headerlink" title="Dynamic Programming"></a>Dynamic Programming</h2><h3 id="746-Min-Cost-Climbing-Stairs"><a href="#746-Min-Cost-Climbing-Stairs" class="headerlink" title="746. Min Cost Climbing Stairs"></a><a href="https://leetcode.com/problems/min-cost-climbing-stairs/" target="_blank" rel="noopener">746. Min Cost Climbing Stairs</a></h3><h3 id="53-Maximum-Subarray"><a href="#53-Maximum-Subarray" class="headerlink" title="53. Maximum Subarray"></a><a href="https://leetcode.com/problems/maximum-subarray/" target="_blank" rel="noopener">53. Maximum Subarray</a></h3><h3 id="121-Best-Time-to-Buy-and-Sell-Stock"><a href="#121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="121. Best Time to Buy and Sell Stock"></a><a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock/" target="_blank" rel="noopener">121. Best Time to Buy and Sell Stock</a></h3><h3 id="303-Range-Sum-Query-Immutable"><a href="#303-Range-Sum-Query-Immutable" class="headerlink" title="303. Range Sum Query - Immutable"></a><a href="https://leetcode.com/problems/range-sum-query-immutable/" target="_blank" rel="noopener">303. Range Sum Query - Immutable</a></h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C#</span></span><br><span class="line"><span class="comment">// save every range from index 0 to index j</span></span><br><span class="line"><span class="comment">// sum from index i to index j = range(0, j) - range(0, i)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NumArray</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] ranges;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NumArray</span>(<span class="params"><span class="keyword">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">        ranges = <span class="keyword">new</span> <span class="keyword">int</span>[nums.Length + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">            ranges[i + <span class="number">1</span>] = sum + nums[i];</span><br><span class="line">            sum += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">SumRange</span>(<span class="params"><span class="keyword">int</span> i, <span class="keyword">int</span> j</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ranges[j + <span class="number">1</span>] - ranges[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NumArray</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, nums: List[int])</span>:</span></span><br><span class="line">        self.__ranges = [<span class="number">0</span>]</span><br><span class="line">        sum = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> (i, num) <span class="keyword">in</span> enumerate(nums):</span><br><span class="line">            self.__ranges.append(sum + num)</span><br><span class="line">            sum += num</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sumRange</span><span class="params">(self, left: int, right: int)</span> -&gt; int:</span></span><br><span class="line">        <span class="keyword">return</span> self.__ranges[right + <span class="number">1</span>] - self.__ranges[left]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Your NumArray object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"># obj = NumArray(nums)</span></span><br><span class="line"><span class="comment"># param_1 = obj.sumRange(left,right)</span></span><br></pre></td></tr></table></figure><h3 id="413-Arithmetic-Slices"><a href="#413-Arithmetic-Slices" class="headerlink" title="413. Arithmetic Slices"></a><a href="https://leetcode.com/problems/arithmetic-slices/" target="_blank" rel="noopener">413. Arithmetic Slices</a></h3><h2 id="Union-Find"><a href="#Union-Find" class="headerlink" title="Union Find"></a>Union Find</h2><h3 id="547-Friend-Circles"><a href="#547-Friend-Circles" class="headerlink" title="547. Friend Circles"></a><a href="https://leetcode.com/problems/friend-circles/" target="_blank" rel="noopener">547. Friend Circles</a></h3><p><a href="https://leetcode.com/problems/friend-circles/discuss/101336/Java-solution-Union-Find" target="_blank" rel="noopener">Java solution, Union Find</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This article is for helping someone who wants to practice algorithms on leetcode, and already has some basic data structure knowledge like hash table, stack, queue, etc.&lt;/p&gt;
&lt;p&gt;After solving some problems, I think some conceptual problems/solutions that once are understood, other problems are just the same. And without knowing these solutions, some problems are just not so easy to come up with a good solution.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Algorithms" scheme="https://thiswayne.github.io/tags/Algorithms/"/>
    
      <category term="Leetcode" scheme="https://thiswayne.github.io/tags/Leetcode/"/>
    
      <category term="Conceptual Problems" scheme="https://thiswayne.github.io/tags/Conceptual-Problems/"/>
    
      <category term="Coding Tips" scheme="https://thiswayne.github.io/tags/Coding-Tips/"/>
    
      <category term="Code Templates" scheme="https://thiswayne.github.io/tags/Code-Templates/"/>
    
  </entry>
  
</feed>
